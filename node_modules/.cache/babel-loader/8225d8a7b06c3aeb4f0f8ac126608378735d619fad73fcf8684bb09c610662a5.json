{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pans = {\n  rectangular: [{\n    length: 8,\n    width: 8,\n    height: 2\n  }, {\n    length: 9,\n    width: 9,\n    height: 2\n  }, {\n    length: 10,\n    width: 10,\n    height: 2\n  }, {\n    length: 11,\n    width: 7,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }],\n  round: [{\n    diameter: 6,\n    height: 2\n  }, {\n    diameter: 8,\n    height: 2\n  }, {\n    diameter: 9,\n    height: 2\n  }, {\n    diameter: 10,\n    height: 2\n  }],\n  springform: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  bundt: [{\n    diameter: 8,\n    height: 4\n  }, {\n    diameter: 10,\n    height: 3\n  }],\n  tube: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  loaf: [{\n    length: 8,\n    width: 4,\n    height: 2.5\n  }, {\n    length: 9,\n    width: 5,\n    height: 2.5\n  }]\n};\n\n// For resetting pan dimensions\nconst emptyDimensions = {\n  length: undefined,\n  width: undefined,\n  height: undefined,\n  diameter: undefined\n};\nconst maxVolumeDifference = 0.1;\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return calculateCuboidVolume(dimensions);\n  } else if (type === 'round' || type === 'springform') {\n    return calculateCylinderVolume(dimensions);\n  } else if (type === 'tube') {\n    return calculateHollowCylinderVolume(dimensions, 1);\n  } else if (type === 'bundt') {\n    return calculateHollowCylinderVolume(dimensions, 0.7);\n  }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    const {\n      length,\n      width,\n      height\n    } = dimensions;\n    return `${length} X ${width} X ${height}`;\n  } else {\n    const {\n      diameter,\n      height\n    } = dimensions;\n    return `${diameter} X ${height}`;\n  }\n}\n\n// Updates each dimension with its corresponding volume and label\nfunction updateDimensions() {\n  for (const type in pans) {\n    pans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n      dimensions.label = generateLabel(type, dimensions);\n    });\n  }\n}\nupdateDimensions();\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variable for selected shape\n  const [shape, setShape] = useState('rectangular');\n  const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n\n  // State variable for index of selected dimensions\n  const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n  // State variable to manage custom dimensions section\n  const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n\n  // State variable to manage when to show matches\n  const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n  const [volume, setVolume] = useState(0);\n\n  // Event handler for shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n    setIsDisplayMatches(false);\n\n    // Reset selected dimension to the first one\n    setSelectedDimensionsIndex(0);\n    setCurrentDimensions(pans[type][0]);\n\n    // Hide custom dimensions section\n    setIsCustomDimensions(false);\n  }\n\n  // Event handler for dimension change\n  function handleDimensionChange(event) {\n    const selectedIndex = event.target.value;\n    setSelectedDimensionsIndex(selectedIndex);\n    setIsDisplayMatches(false);\n\n    // setCurrentDimensions(pans[shape][selectedIndex]);\n\n    // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n    // setIsCustomDimensions(selectedIndex === 'custom');\n\n    if (selectedIndex === 'custom') {\n      setIsCustomDimensions(true);\n      setCurrentDimensions(emptyDimensions);\n    } else {\n      setIsCustomDimensions(false);\n      setCurrentDimensions(pans[shape][selectedIndex]);\n    }\n  }\n  function handleCustomDimensionChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setCurrentDimensions({\n      ...currentDimensions,\n      [name]: value\n    });\n  }\n  function handleEnter(event) {\n    // Prevent page reload on button click\n    event.preventDefault();\n    setVolume(calculateVolume(shape, currentDimensions));\n    setIsDisplayMatches(true);\n  }\n\n  // Returns an array of acceptable pan substitutes, formatted as [pan type, pan dimension string]\n  function findMatches() {\n    var currentLabel = generateLabel(shape, currentDimensions);\n    var matches = [];\n    for (const type in pans) {\n      pans[type].forEach(pan => {\n        // Check conditions for matching pans\n        const isDifferentLabel = pan.label !== currentLabel;\n        const isDifferentShape = shape !== type;\n        const isVolumeWithinRange = Math.abs(pan.volume - volume) < maxVolumeDifference;\n        if ((isDifferentLabel || !isDifferentLabel && isDifferentShape) && isVolumeWithinRange) {\n          matches.push(`${type}: ${pan.label}`);\n        }\n      });\n    }\n    return matches;\n  }\n\n  // Renders the matches array in list form\n  function renderMatches() {\n    const matches = findMatches();\n    if (matches.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No substitutions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 20\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Substitutions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: matches.map((match, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: match\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: selectedDimensionsIndex,\n          onChange: handleDimensionChange,\n          children: [pans[shape].map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"custom\",\n            children: \"Custom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), isCustomDimensions && (shape === 'rectangular' || shape == 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"length\",\n          placeholder: \"Length\",\n          required: true,\n          value: currentDimensions.length,\n          onChange: handleCustomDimensionChange,\n          class: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          placeholder: \"Width\",\n          required: true,\n          value: currentDimensions.width,\n          onChange: handleCustomDimensionChange,\n          class: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: currentDimensions.height,\n          onChange: handleCustomDimensionChange,\n          class: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this), isCustomDimensions && !(shape === 'rectangular' || shape == 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"diameter\",\n          placeholder: \"Diameter\",\n          required: true,\n          value: currentDimensions.diameter,\n          onChange: handleCustomDimensionChange,\n          class: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: currentDimensions.height,\n          onChange: handleCustomDimensionChange,\n          class: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEnter,\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), isDisplayMatches && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderMatches()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"m+bCOgVxCsbznuT7a2soNRn5pMM=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","pans","rectangular","length","width","height","round","diameter","springform","bundt","tube","loaf","emptyDimensions","undefined","maxVolumeDifference","cubicInchesToLitres","x","cylinderVolume","Math","PI","calculateCuboidVolume","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","type","dimensions","generateLabel","updateDimensions","forEach","volume","label","PanSizer","_s","shape","setShape","currentDimensions","setCurrentDimensions","selectedDimensionsIndex","setSelectedDimensionsIndex","isCustomDimensions","setIsCustomDimensions","isDisplayMatches","setIsDisplayMatches","setVolume","handleShapeChange","event","target","value","handleDimensionChange","selectedIndex","handleCustomDimensionChange","name","handleEnter","preventDefault","findMatches","currentLabel","matches","pan","isDifferentLabel","isDifferentShape","isVolumeWithinRange","abs","push","renderMatches","children","fileName","_jsxFileName","lineNumber","columnNumber","map","match","index","className","id","onChange","option","placeholder","required","class","onClick","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nconst pans = {\n    rectangular: [\n        { length: 8, width: 8, height: 2 },\n        { length: 9, width: 9, height: 2  },\n        { length: 10, width: 10, height: 2 },\n        { length: 11, width: 7, height: 2 },\n        { length: 13, width: 9, height: 2 }\n    ],\n    round: [\n        { diameter: 6, height: 2 },\n        { diameter: 8, height: 2 },\n        { diameter: 9, height: 2 },\n        { diameter: 10, height: 2 }\n    ],\n    springform: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    bundt: [\n        { diameter: 8, height: 4 },\n        { diameter: 10, height: 3 }\n    ],\n    tube: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    loaf: [\n        { length: 8, width: 4, height: 2.5 },\n        { length: 9, width: 5, height: 2.5 }\n    ],\n};\n\n// For resetting pan dimensions\nconst emptyDimensions = {\n    length: undefined,\n    width: undefined,\n    height: undefined,\n    diameter: undefined\n};\n\nconst maxVolumeDifference = 0.1;\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return calculateCuboidVolume(dimensions); \n    } else if (type === 'round' || type === 'springform') {\n        return calculateCylinderVolume(dimensions); \n    } else if (type === 'tube') {\n        return calculateHollowCylinderVolume(dimensions, 1); \n    } else if (type === 'bundt') {\n        return calculateHollowCylinderVolume(dimensions, 0.7); \n    }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        const { length, width, height } = dimensions;\n        return `${length} X ${width} X ${height}`;\n    } else {\n        const { diameter, height } = dimensions;\n        return `${diameter} X ${height}`;\n    }\n}\n\n// Updates each dimension with its corresponding volume and label\nfunction updateDimensions() {\n    for (const type in pans) {\n        pans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n            dimensions.label = generateLabel(type, dimensions);\n        });\n    }\n}\nupdateDimensions();\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variable for selected shape\n    const [shape, setShape] = useState('rectangular');\n\n    const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n    \n    // State variable for index of selected dimensions\n    const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n    // State variable to manage custom dimensions section\n    const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n\n    // State variable to manage when to show matches\n    const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n    const [volume, setVolume] = useState(0);\n\n    // Event handler for shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n\n        setIsDisplayMatches(false);\n\n        // Reset selected dimension to the first one\n        setSelectedDimensionsIndex(0);\n        \n        setCurrentDimensions(pans[type][0]);\n\n        // Hide custom dimensions section\n        setIsCustomDimensions(false);\n    }\n\n    // Event handler for dimension change\n    function handleDimensionChange(event) {\n        const selectedIndex = event.target.value;\n        setSelectedDimensionsIndex(selectedIndex);\n\n        setIsDisplayMatches(false);\n\n        // setCurrentDimensions(pans[shape][selectedIndex]);\n\n        // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n        // setIsCustomDimensions(selectedIndex === 'custom');\n\n        if (selectedIndex === 'custom') {\n            setIsCustomDimensions(true);\n            setCurrentDimensions(emptyDimensions);\n        } else {\n            setIsCustomDimensions(false);\n            setCurrentDimensions(pans[shape][selectedIndex]);\n        }\n    }\n\n    function handleCustomDimensionChange(event) {\n        const {name, value} = event.target;\n        setCurrentDimensions({\n            ...currentDimensions,\n            [name]: value\n          });\n    }\n\n    function handleEnter(event) {\n        // Prevent page reload on button click\n        event.preventDefault(); \n        setVolume(calculateVolume(shape, currentDimensions));\n        setIsDisplayMatches(true);\n    }\n\n    // Returns an array of acceptable pan substitutes, formatted as [pan type, pan dimension string]\n    function findMatches() {\n        var currentLabel = generateLabel(shape, currentDimensions);\n        var matches = [];\n        for (const type in pans) {\n            pans[type].forEach(pan => {\n                // Check conditions for matching pans\n                const isDifferentLabel = pan.label !== currentLabel;\n                const isDifferentShape = shape !== type;\n                const isVolumeWithinRange = Math.abs(pan.volume - volume) < maxVolumeDifference;\n\n                if ((isDifferentLabel || !isDifferentLabel && isDifferentShape) && isVolumeWithinRange) {\n                    matches.push(`${type}: ${pan.label}`);\n                }\n            });\n        } \n        return matches;  \n    }\n\n    // Renders the matches array in list form\n    function renderMatches() {\n        const matches = findMatches();\n        if (matches.length === 0) {\n            return <p>No substitutions found.</p>;\n        }\n        return (\n            <div>\n                <h3>Substitutions:</h3>\n                <ul>\n                    {matches.map((match, index) => (\n                        <li key={index}>{match}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n\n    // Render the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={selectedDimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Unless custom diemnsion ption chosen, map over dimension options to display in dropdown */}\n                    {pans[shape].map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    <option value=\"custom\">Custom</option>\n                    </select>\n                </p>\n                \n                {/* Displayed only if user chooses to enter custom dimensions */}\n                {isCustomDimensions && (shape === 'rectangular' || shape == 'loaf') && (\n                    <p>\n                        <input \n                            type=\"number\" \n                            name=\"length\" \n                            placeholder=\"Length\" \n                            required \n                            value={currentDimensions.length} \n                            onChange={handleCustomDimensionChange} \n                            class=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"width\" \n                            placeholder=\"Width\" \n                            required \n                            value={currentDimensions.width} \n                            onChange={handleCustomDimensionChange} \n                            class=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"height\" \n                            placeholder=\"Height\" \n                            required \n                            value={currentDimensions.height} \n                            onChange={handleCustomDimensionChange} \n                            class=\"dimension-input\"\n                        />\n                    </p>\n                )}\n                {isCustomDimensions && !(shape === 'rectangular' || shape == 'loaf') && (\n                    <p>\n                        <input \n                            type=\"number\" \n                            name=\"diameter\" \n                            placeholder=\"Diameter\" \n                            required \n                            value={currentDimensions.diameter} \n                            onChange={handleCustomDimensionChange} \n                            class=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"height\" \n                            placeholder=\"Height\" \n                            required \n                            value={currentDimensions.height} \n                            onChange={handleCustomDimensionChange}\n                            class=\"dimension-input\"\n                        />\n                    </p>\n                )}\n\n                <button onClick={handleEnter}>Enter</button>\n                \n                {/* Renders a list of pan matches, if any */}\n                {isDisplayMatches && \n                    <div>{renderMatches()}</div>\n                }\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}