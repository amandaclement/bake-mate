{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customDefaultDimensions = {\n  length: 'Length',\n  width: 'Width',\n  height: 'Height',\n  diameter: 'Diameter',\n  label: 'custom'\n};\n\n// Standard pan shapes and their dimensions\nconst pans = {\n  rectangular: [{\n    length: 8,\n    width: 8,\n    height: 2\n  }, {\n    length: 9,\n    width: 9,\n    height: 2\n  }, {\n    length: 10,\n    width: 10,\n    height: 2\n  }, {\n    length: 11,\n    width: 7,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }, {\n    ...customDefaultDimensions\n  }],\n  round: [{\n    diameter: 6,\n    height: 2\n  }, {\n    diameter: 8,\n    height: 2\n  }, {\n    diameter: 9,\n    height: 2\n  }, {\n    diameter: 10,\n    height: 2\n  }, {\n    ...customDefaultDimensions\n  }],\n  springform: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }, {\n    ...customDefaultDimensions\n  }],\n  bundt: [{\n    diameter: 8,\n    height: 4\n  }, {\n    diameter: 10,\n    height: 3\n  }, {\n    ...customDefaultDimensions\n  }],\n  tube: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }, {\n    ...customDefaultDimensions\n  }],\n  loaf: [{\n    length: 8,\n    width: 4,\n    height: 2.5\n  }, {\n    length: 9,\n    width: 5,\n    height: 2.5\n  }, {\n    ...customDefaultDimensions\n  }]\n};\n\n// For resetting pan dimensions\nconst emptyDimensions = {\n  length: '',\n  width: '',\n  height: '',\n  diameter: ''\n};\nconst maxVolumeDifference = 0.1;\nconst bundtScaler = 0.7;\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of certain pan types\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return calculateCuboidVolume(dimensions);\n  } else if (type === 'round' || type === 'springform') {\n    return calculateCylinderVolume(dimensions);\n  } else if (type === 'tube') {\n    return calculateHollowCylinderVolume(dimensions, 1);\n  } else if (type === 'bundt') {\n    return calculateHollowCylinderVolume(dimensions, bundtScaler);\n  }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n  if (dimensions.label === 'custom') {\n    return 'Custom';\n  } else if (type === 'rectangular' || type === 'loaf') {\n    const {\n      length,\n      width,\n      height\n    } = dimensions;\n    return `${length} X ${width} X ${height}`;\n  } else {\n    const {\n      diameter,\n      height\n    } = dimensions;\n    return `${diameter} X ${height}`;\n  }\n}\n\n// Updates each dimension with its corresponding volume and label\nfunction updateDimensions() {\n  for (const type in pans) {\n    pans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n      dimensions.label = generateLabel(type, dimensions);\n    });\n  }\n}\nupdateDimensions();\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variables\n  const [shape, setShape] = useState('rectangular');\n  const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n  // const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n  const [volume, setVolume] = useState(0);\n  const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n  // Handles shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n    setSelectedDimensionsIndex(0);\n    setIsDisplayMatches(false);\n  }\n\n  // Handles dimension change\n  function handleDimensionChange(event) {\n    const selectedIndex = event.target.value;\n    setSelectedDimensionsIndex(selectedIndex);\n\n    // If custom chosen, reset dimensions to null, else set them to appropriate shape/dimension combo\n    // selectedIndex === 'custom' ? setCurrentDimensions(emptyDimensions) : setCurrentDimensions(pans[shape][selectedIndex]);\n    setIsDisplayMatches(false);\n  }\n\n  // Handles custom dimension input entries\n  function handleCustomDimensionChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    pans[shape][selectedDimensionsIndex][name] = value;\n\n    // // pans[shape][selectedDimensionsIndex].height = 2;\n\n    // // pans[shape][selectedDimensionsIndex].height = 2;\n    // // pans[shape][selectedDimensionsIndex].width = 8;\n    // // pans[shape][selectedDimensionsIndex].length = 8;\n\n    // pans[shape][selectedDimensionsIndex]({\n    //     ...getCurrentDimensions(),\n    //     [name]: value\n    //   });\n\n    // console.log(getCurrentDimensions());\n  }\n  function getCurrentDimensions() {\n    return pans[shape][selectedDimensionsIndex];\n  }\n  // console.log(getCurrentDimensions());\n\n  // function setCurrentDimensions(dimensions) {\n  //     // const currentPan = getCurrentDimensions(); // Get the current pan dimensions\n  //     // pans[shape][selectedDimensionsIndex].width = 10;\n  //     // const newDimensions = { ...getCurrentDimensions(), ...dimensions };\n  //     // const { shape, selectedDimensionsIndex } = currentPan;\n  //     // pans[shape][selectedDimensionsIndex] = { ...currentPan, ...dimensions };\n  // }\n\n  // Handles submit button\n  function handleResult(event) {\n    // Prevent page reload on button click\n    event.preventDefault();\n    setVolume(calculateVolume(shape, getCurrentDimensions()));\n    setIsDisplayMatches(true);\n  }\n\n  // Returns an array of acceptable pan substitutes, formatted as type:label\n  function findMatches() {\n    var currentLabel = generateLabel(shape, getCurrentDimensions());\n    var matches = [];\n    for (const type in pans) {\n      pans[type].forEach(pan => {\n        // Check conditions for matching pans\n        const isDifferentLabel = pan.label !== currentLabel;\n        const isDifferentShape = shape !== type;\n        const isVolumeWithinRange = Math.abs(pan.volume - volume) < maxVolumeDifference;\n        if ((isDifferentLabel || !isDifferentLabel && isDifferentShape) && isVolumeWithinRange) {\n          matches.push(`${type}: ${pan.label}`);\n        }\n      });\n    }\n    return matches;\n  }\n\n  // Returns the matches in list form\n  function renderMatches() {\n    const matches = findMatches();\n    if (matches.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No substitutions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 20\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Substitutions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: matches.map((match, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: match\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Renders the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: selectedDimensionsIndex,\n          onChange: handleDimensionChange,\n          children: pans[shape].map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), selectedDimensionsIndex == pans[shape].length - 1 && (shape === 'rectangular' || shape == 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"length\",\n          placeholder: \"Length\",\n          required: true,\n          value: getCurrentDimensions().length,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          placeholder: \"Width\",\n          required: true,\n          value: getCurrentDimensions().width,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: getCurrentDimensions().height,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }, this), selectedDimensionsIndex == pans[shape].length - 1 && !(shape === 'rectangular' || shape == 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"diameter\",\n          placeholder: \"Diameter\",\n          required: true,\n          value: getCurrentDimensions().diameter,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: getCurrentDimensions().height,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResult,\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), isDisplayMatches && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderMatches()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"mjbATB2pHO7tmNECdBOGQ5K7g2E=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","customDefaultDimensions","length","width","height","diameter","label","pans","rectangular","round","springform","bundt","tube","loaf","emptyDimensions","maxVolumeDifference","bundtScaler","cubicInchesToLitres","x","cylinderVolume","Math","PI","calculateCuboidVolume","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","type","dimensions","generateLabel","updateDimensions","forEach","volume","PanSizer","_s","shape","setShape","selectedDimensionsIndex","setSelectedDimensionsIndex","setVolume","isDisplayMatches","setIsDisplayMatches","handleShapeChange","event","target","value","handleDimensionChange","selectedIndex","handleCustomDimensionChange","name","getCurrentDimensions","handleResult","preventDefault","findMatches","currentLabel","matches","pan","isDifferentLabel","isDifferentShape","isVolumeWithinRange","abs","push","renderMatches","children","fileName","_jsxFileName","lineNumber","columnNumber","map","match","index","className","id","onChange","option","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\n\nconst customDefaultDimensions = {\n    length: 'Length',\n    width: 'Width',\n    height: 'Height',\n    diameter: 'Diameter',\n    label: 'custom'\n};\n\n// Standard pan shapes and their dimensions\nconst pans = {\n    rectangular: [\n        { length: 8, width: 8, height: 2 },\n        { length: 9, width: 9, height: 2  },\n        { length: 10, width: 10, height: 2 },\n        { length: 11, width: 7, height: 2 },\n        { length: 13, width: 9, height: 2 },\n        { length: 13, width: 9, height: 2 },\n        { ...customDefaultDimensions }\n    ],\n    round: [\n        { diameter: 6, height: 2 },\n        { diameter: 8, height: 2 },\n        { diameter: 9, height: 2 },\n        { diameter: 10, height: 2 },\n        { ...customDefaultDimensions }\n    ],\n    springform: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 },\n        { ...customDefaultDimensions }\n    ],\n    bundt: [\n        { diameter: 8, height: 4 },\n        { diameter: 10, height: 3 },\n        { ...customDefaultDimensions }\n    ],\n    tube: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 },\n        { ...customDefaultDimensions }\n    ],\n    loaf: [\n        { length: 8, width: 4, height: 2.5 },\n        { length: 9, width: 5, height: 2.5 },\n        { ...customDefaultDimensions }\n    ],\n};\n\n// For resetting pan dimensions\nconst emptyDimensions = {\n    length: '',\n    width: '',\n    height: '',\n    diameter: ''\n};\n\nconst maxVolumeDifference = 0.1;\nconst bundtScaler = 0.7;\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of certain pan types\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return calculateCuboidVolume(dimensions); \n    } else if (type === 'round' || type === 'springform') {\n        return calculateCylinderVolume(dimensions); \n    } else if (type === 'tube') {\n        return calculateHollowCylinderVolume(dimensions, 1); \n    } else if (type === 'bundt') {\n        return calculateHollowCylinderVolume(dimensions, bundtScaler); \n    }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n    if (dimensions.label === 'custom') {\n        return 'Custom';\n    }\n    else if (type === 'rectangular' || type === 'loaf') {\n        const { length, width, height } = dimensions;\n        return `${length} X ${width} X ${height}`;\n    } else {\n        const { diameter, height } = dimensions;\n        return `${diameter} X ${height}`;\n    }\n}\n\n// Updates each dimension with its corresponding volume and label\nfunction updateDimensions() {\n    for (const type in pans) {\n        pans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n            dimensions.label = generateLabel(type, dimensions);\n        });\n    }\n}\nupdateDimensions();\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variables\n    const [shape, setShape] = useState('rectangular');\n    const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n    // const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n    const [volume, setVolume] = useState(0);\n    const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n    // Handles shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n        setSelectedDimensionsIndex(0);\n        setIsDisplayMatches(false);\n    }\n\n    // Handles dimension change\n    function handleDimensionChange(event) {\n        const selectedIndex = event.target.value;\n        setSelectedDimensionsIndex(selectedIndex);\n\n        // If custom chosen, reset dimensions to null, else set them to appropriate shape/dimension combo\n        // selectedIndex === 'custom' ? setCurrentDimensions(emptyDimensions) : setCurrentDimensions(pans[shape][selectedIndex]);\n        setIsDisplayMatches(false);\n    }\n\n    // Handles custom dimension input entries\n    function handleCustomDimensionChange(event) {\n        const {name, value} = event.target;\n        pans[shape][selectedDimensionsIndex][name] = value;\n\n        // // pans[shape][selectedDimensionsIndex].height = 2;\n\n        // // pans[shape][selectedDimensionsIndex].height = 2;\n        // // pans[shape][selectedDimensionsIndex].width = 8;\n        // // pans[shape][selectedDimensionsIndex].length = 8;\n\n        // pans[shape][selectedDimensionsIndex]({\n        //     ...getCurrentDimensions(),\n        //     [name]: value\n        //   });\n\n        // console.log(getCurrentDimensions());\n    }\n\n    function getCurrentDimensions() {\n        return pans[shape][selectedDimensionsIndex];\n    }\n    // console.log(getCurrentDimensions());\n\n    // function setCurrentDimensions(dimensions) {\n    //     // const currentPan = getCurrentDimensions(); // Get the current pan dimensions\n    //     // pans[shape][selectedDimensionsIndex].width = 10;\n    //     // const newDimensions = { ...getCurrentDimensions(), ...dimensions };\n    //     // const { shape, selectedDimensionsIndex } = currentPan;\n    //     // pans[shape][selectedDimensionsIndex] = { ...currentPan, ...dimensions };\n    // }\n\n    // Handles submit button\n    function handleResult(event) {\n        // Prevent page reload on button click\n        event.preventDefault(); \n        setVolume(calculateVolume(shape, getCurrentDimensions()));\n        setIsDisplayMatches(true);\n    }\n\n    // Returns an array of acceptable pan substitutes, formatted as type:label\n    function findMatches() {\n        var currentLabel = generateLabel(shape, getCurrentDimensions());\n        var matches = [];\n        for (const type in pans) {\n            pans[type].forEach(pan => {\n                // Check conditions for matching pans\n                const isDifferentLabel = pan.label !== currentLabel;\n                const isDifferentShape = shape !== type;\n                const isVolumeWithinRange = Math.abs(pan.volume - volume) < maxVolumeDifference;\n\n                if ((isDifferentLabel || !isDifferentLabel && isDifferentShape) && isVolumeWithinRange) {\n                    matches.push(`${type}: ${pan.label}`);\n                }\n            });\n        } \n        return matches;  \n    }\n\n    // Returns the matches in list form\n    function renderMatches() {\n        const matches = findMatches();\n        if (matches.length === 0) {\n            return <p>No substitutions found.</p>;\n        }\n        return (\n            <div>\n                <h3>Substitutions:</h3>\n                <ul>\n                    {matches.map((match, index) => (\n                        <li key={index}>{match}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n\n    // Renders the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={selectedDimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Map over dimension options to display in dropdown */}\n                    {pans[shape].map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    {/* <option value=\"custom\">Custom</option> */}\n                    </select>\n                </p>\n                \n                {/* Displays additional input boxes (based on chosen shape) only if user chooses to enter custom dimensions */}\n                {selectedDimensionsIndex == (pans[shape].length - 1) && (shape === 'rectangular' || shape == 'loaf') && (\n                    <p>\n                        <input \n                            type=\"number\" \n                            name=\"length\" \n                            placeholder=\"Length\" \n                            required \n                            value={getCurrentDimensions().length} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"width\" \n                            placeholder=\"Width\" \n                            required \n                            value={getCurrentDimensions().width} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"height\" \n                            placeholder=\"Height\" \n                            required \n                            value={getCurrentDimensions().height} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        />\n                    </p>\n                )}\n                {selectedDimensionsIndex == (pans[shape].length - 1) && !(shape === 'rectangular' || shape == 'loaf') && (\n                    <p>\n                        <input \n                            type=\"number\" \n                            name=\"diameter\" \n                            placeholder=\"Diameter\" \n                            required \n                            value={getCurrentDimensions().diameter} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"height\" \n                            placeholder=\"Height\" \n                            required \n                            value={getCurrentDimensions().height} \n                            onChange={handleCustomDimensionChange}\n                            className=\"dimension-input\"\n                        />\n                    </p>\n                )}\n\n                <button onClick={handleResult}>Enter</button>\n                \n                {/* Renders a list of pan matches, if any */}\n                {isDisplayMatches && \n                    <div>{renderMatches()}</div>\n                }\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}