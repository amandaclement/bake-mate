{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pans = {\n  rectangular: [{\n    length: 8,\n    width: 8,\n    height: 2\n  }, {\n    length: 9,\n    width: 9,\n    height: 2\n  }, {\n    length: 10,\n    width: 10,\n    height: 2\n  }, {\n    length: 11,\n    width: 7,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }],\n  round: [{\n    diameter: 6,\n    height: 2\n  }, {\n    diameter: 8,\n    height: 2\n  }, {\n    diameter: 9,\n    height: 2\n  }, {\n    diameter: 10,\n    height: 2\n  }],\n  springform: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  bundt: [{\n    diameter: 8,\n    height: 4\n  }, {\n    diameter: 10,\n    height: 3\n  }],\n  tube: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  loaf: [{\n    length: 8,\n    width: 4,\n    height: 2.5\n  }, {\n    length: 9,\n    width: 5,\n    height: 2.5\n  }]\n};\n\n// Generates dimension options for specific pan type\nfunction dimensionOptions(type) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return pans[type].map(({\n      length,\n      width,\n      height\n    }) => ({\n      value: {\n        length,\n        width,\n        height\n      },\n      label: `${length} x ${width} x ${height}`\n    }));\n  } else {\n    return pans[type].map(({\n      diameter,\n      height\n    }) => ({\n      value: {\n        diameter,\n        height\n      },\n      label: `${diameter} x ${height}`\n    }));\n  }\n}\n\n// Generates dimension options for specific pan type\nfunction getDimensions(pan) {\n  console.log(\"type is \" + type);\n  return pans[type].length;\n  // if (pans[type] === 'rectangular' || pans[type] === 'loaf') {\n  //     return `${pans[type].length} x ${pans[type].width} x ${pans[type].height}`;\n  // } else {\n  //     return `${pans[type].diameter} x ${pans[type].height}`;\n  // }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return calculateCuboidVolume(dimensions);\n  } else if (type === 'round' || type === 'springform') {\n    return calculateCylinderVolume(dimensions);\n  } else if (type === 'tube') {\n    return calculateHollowCylinderVolume(dimensions, 1);\n  } else if (type === 'bundt') {\n    return calculateHollowCylinderVolume(dimensions, 0.7);\n  }\n}\n\n// Adds corresponding volume for each dimension set in pans\nfunction addVolumes() {\n  for (const type in pans) {\n    pans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n    });\n  }\n}\naddVolumes();\n\n// // Returns any acceptable pan conversions\n// function findMatches(shape, selectedVolume) {\n//     const matches = [];\n//     for (const type in pans) {\n//         if (type != shape) {\n//             pans[type].forEach(pan => {\n//                 if (Math.abs(pan.volume - selectedVolume) < 0.4) {\n//                     matches.push([pan]);\n//                 }\n//             });\n//         }\n//     }  \n//     return matches;  \n// }\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variable for selected shape\n  const [shape, setShape] = useState('rectangular');\n\n  // State variable for dimensions of selected shape\n  const [dimensions, setDimensions] = useState(dimensionOptions('rectangular'));\n\n  // State variable for index of selected dimensions\n  const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n  // Event handler for shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n\n    // Update dimensions based on the selected shape\n    setDimensions(dimensionOptions(type));\n\n    // Reset selected dimension to the first one\n    setSelectedDimensionsIndex(0);\n  }\n\n  // Event handler for dimension change\n  function handleDimensionChange(event) {\n    // event.target.value represents the selected index\n    setSelectedDimensionsIndex(event.target.value);\n  }\n\n  // Get the selected dimension based on the selected index\n  const selectedDimension = dimensions[selectedDimensionsIndex];\n\n  // Returns any acceptable pan conversions\n  function findMatches(shape, selectedVolume) {\n    const matches = [];\n    for (const pan in pans) {\n      if (pan !== shape) {\n        pans[pan].forEach(type => {\n          if (Math.abs(type.volume - selectedVolume) < 0.1) {\n            matches.push([type, getDimensions(type)]);\n          }\n        });\n      }\n    }\n    return matches;\n  }\n\n  // function findAndRenderMatches(shape, selectedVolume) {\n  //     return (\n  //         <ul>\n  //             <li>iusnjnas</li>\n  //             {Object.keys(pans).flatMap(type => {\n  //                 if (type !== shape) {\n  //                     return pans[type].map(pan => {\n  //                         if (Math.abs(pan.volume - selectedVolume) < 0.1) {\n  //                             return (\n  //                                 <li key={`${type}-${pan.volume}`}>\n  //                                     Shape: {type}, Dimensions: {getDimensions(type, pan)}\n  //                                 </li>\n  //                             );\n  //                         }\n  //                         return null;\n  //                     });\n  //                 }\n  //                 return [];\n  //             })}\n  //             {/* {matchesList.length === 0 && <li>No matches found</li>} */}\n  //         </ul>\n  //     );\n  // }\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: selectedDimensionsIndex,\n          onChange: handleDimensionChange,\n          children: dimensions.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${findMatches(shape, pans[shape][selectedDimensionsIndex].volume)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"yX3ibYcU1jIxxTQ4V15JFUTByh4=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","pans","rectangular","length","width","height","round","diameter","springform","bundt","tube","loaf","dimensionOptions","type","map","value","label","getDimensions","pan","console","log","cubicInchesToLitres","x","cylinderVolume","Math","PI","calculateCuboidVolume","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","dimensions","addVolumes","forEach","volume","PanSizer","_s","shape","setShape","setDimensions","selectedDimensionsIndex","setSelectedDimensionsIndex","handleShapeChange","event","target","handleDimensionChange","selectedDimension","findMatches","selectedVolume","matches","abs","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","name","onChange","option","index","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nconst pans = {\n    rectangular: [\n        { length: 8, width: 8, height: 2 },\n        { length: 9, width: 9, height: 2  },\n        { length: 10, width: 10, height: 2 },\n        { length: 11, width: 7, height: 2 },\n        { length: 13, width: 9, height: 2 }\n    ],\n    round: [\n        { diameter: 6, height: 2 },\n        { diameter: 8, height: 2 },\n        { diameter: 9, height: 2 },\n        { diameter: 10, height: 2 }\n    ],\n    springform: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    bundt: [\n        { diameter: 8, height: 4 },\n        { diameter: 10, height: 3 }\n    ],\n    tube: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    loaf: [\n        { length: 8, width: 4, height: 2.5 },\n        { length: 9, width: 5, height: 2.5 }\n    ],\n};\n\n// Generates dimension options for specific pan type\nfunction dimensionOptions(type) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return pans[type].map(({ length, width, height }) => ({\n            value: { length, width, height },\n            label: `${length} x ${width} x ${height}`\n        }));\n    } else {\n        return pans[type].map(({ diameter, height }) => ({\n            value: { diameter, height },\n            label: `${diameter} x ${height}`\n        }));\n    }\n}\n\n// Generates dimension options for specific pan type\nfunction getDimensions(pan) {\n    console.log(\"type is \" + type);\n    return pans[type].length;\n    // if (pans[type] === 'rectangular' || pans[type] === 'loaf') {\n    //     return `${pans[type].length} x ${pans[type].width} x ${pans[type].height}`;\n    // } else {\n    //     return `${pans[type].diameter} x ${pans[type].height}`;\n    // }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return calculateCuboidVolume(dimensions); \n    } else if (type === 'round' || type === 'springform') {\n        return calculateCylinderVolume(dimensions); \n    } else if (type === 'tube') {\n        return calculateHollowCylinderVolume(dimensions, 1); \n    } else if (type === 'bundt') {\n        return calculateHollowCylinderVolume(dimensions, 0.7); \n    }\n}\n\n// Adds corresponding volume for each dimension set in pans\nfunction addVolumes() {\n    for (const type in pans) {\n        pans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n        });\n    }\n}\naddVolumes();\n\n// // Returns any acceptable pan conversions\n// function findMatches(shape, selectedVolume) {\n//     const matches = [];\n//     for (const type in pans) {\n//         if (type != shape) {\n//             pans[type].forEach(pan => {\n//                 if (Math.abs(pan.volume - selectedVolume) < 0.4) {\n//                     matches.push([pan]);\n//                 }\n//             });\n//         }\n//     }  \n//     return matches;  \n// }\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variable for selected shape\n    const [shape, setShape] = useState('rectangular');\n\n    // State variable for dimensions of selected shape\n    const [dimensions, setDimensions] = useState(dimensionOptions('rectangular'));\n    \n    // State variable for index of selected dimensions\n    const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n    // Event handler for shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n\n        // Update dimensions based on the selected shape\n        setDimensions(dimensionOptions(type));\n\n        // Reset selected dimension to the first one\n        setSelectedDimensionsIndex(0);\n    }\n\n    // Event handler for dimension change\n    function handleDimensionChange(event) {\n        // event.target.value represents the selected index\n        setSelectedDimensionsIndex(event.target.value);\n    }\n\n    // Get the selected dimension based on the selected index\n    const selectedDimension = dimensions[selectedDimensionsIndex];\n\n    // Returns any acceptable pan conversions\n    function findMatches(shape, selectedVolume) {\n        const matches = [];\n        for (const pan in pans) {\n            if (pan !== shape) {\n                pans[pan].forEach(type => {\n                    if (Math.abs(type.volume - selectedVolume) < 0.1) {\n                        matches.push([type, getDimensions(type)]);\n                    }\n                });\n            }\n        }  \n        return matches;  \n    }\n\n    // function findAndRenderMatches(shape, selectedVolume) {\n    //     return (\n    //         <ul>\n    //             <li>iusnjnas</li>\n    //             {Object.keys(pans).flatMap(type => {\n    //                 if (type !== shape) {\n    //                     return pans[type].map(pan => {\n    //                         if (Math.abs(pan.volume - selectedVolume) < 0.1) {\n    //                             return (\n    //                                 <li key={`${type}-${pan.volume}`}>\n    //                                     Shape: {type}, Dimensions: {getDimensions(type, pan)}\n    //                                 </li>\n    //                             );\n    //                         }\n    //                         return null;\n    //                     });\n    //                 }\n    //                 return [];\n    //             })}\n    //             {/* {matchesList.length === 0 && <li>No matches found</li>} */}\n    //         </ul>\n    //     );\n    // }\n\n    // Render the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={selectedDimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Map over dimension options to display in dropdown */}\n                    {dimensions.map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    </select>\n                </p>\n                \n                <div>\n                    {/* Display selected shape and dimensions */}\n                    {/* <p>{`Volume: ${calculateVolume(shape, selectedDimension.value)} L`}</p> */}\n                    {/* <p>{`Volume: ${pans[shape][selectedDimensionsIndex].volume} L`}</p> */}\n                    <p>{`${findMatches(shape, pans[shape][selectedDimensionsIndex].volume)}`}</p>\n                    {/* <p>{`${findAndRenderMatches(shape, pans[shape][selectedDimensionsIndex].volume)}`}</p> */}\n\n\n                    {/* {(shape === 'rectangular' || shape === 'loaf') ?\n                    `Length: ${selectedDimension.value.length}, Width: ${selectedDimension.value.width}, Height: ${selectedDimension.value.height}` :\n                    `Diameter: ${selectedDimension.value.diameter}, Height: ${selectedDimension.value.height}` } */}\n                </div>\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}