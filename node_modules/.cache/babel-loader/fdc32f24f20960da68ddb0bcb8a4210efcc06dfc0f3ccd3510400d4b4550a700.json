{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pans = {\n  rectangular: [{\n    length: 8,\n    width: 8,\n    height: 2\n  }, {\n    length: 9,\n    width: 9,\n    height: 2\n  }, {\n    length: 10,\n    width: 10,\n    height: 2\n  }, {\n    length: 11,\n    width: 7,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }],\n  round: [{\n    diameter: 6,\n    height: 2\n  }, {\n    diameter: 8,\n    height: 2\n  }, {\n    diameter: 9,\n    height: 2\n  }, {\n    diameter: 10,\n    height: 2\n  }],\n  springform: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  bundt: [{\n    diameter: 8,\n    height: 4\n  }, {\n    diameter: 10,\n    height: 3\n  }],\n  tube: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  loaf: [{\n    length: 8,\n    width: 4,\n    height: 2.5\n  }, {\n    length: 9,\n    width: 5,\n    height: 2.5\n  }]\n};\nconst maxVolumeDifference = 0.1;\n\n// Generates dimension options for specific pan type\nfunction dimensionOptions(type) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return pans[type].map(({\n      length,\n      width,\n      height\n    }) => ({\n      value: {\n        length,\n        width,\n        height\n      },\n      label: `${length} x ${width} x ${height}`\n    }));\n  } else {\n    return pans[type].map(({\n      diameter,\n      height\n    }) => ({\n      value: {\n        diameter,\n        height\n      },\n      label: `${diameter} x ${height}`\n    }));\n  }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return calculateCuboidVolume(dimensions);\n  } else if (type === 'round' || type === 'springform') {\n    return calculateCylinderVolume(dimensions);\n  } else if (type === 'tube') {\n    return calculateHollowCylinderVolume(dimensions, 1);\n  } else if (type === 'bundt') {\n    return calculateHollowCylinderVolume(dimensions, 0.7);\n  }\n}\n\n// Adds corresponding volume for each dimension set in pans\nfunction addVolumes() {\n  for (const type in pans) {\n    pans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n    });\n  }\n}\naddVolumes();\n\n// Generates dimension options for specific pan type\nfunction getDimensions(type, pan) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return `${pan.length} x ${pan.width} x ${pan.height}`;\n  } else {\n    return `${pan.diameter} x ${pan.height}`;\n  }\n}\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variable for selected shape\n  const [shape, setShape] = useState('rectangular');\n\n  // State variable for dimensions of selected shape\n  const [dimensions, setDimensions] = useState(dimensionOptions('rectangular'));\n\n  // State variable for index of selected dimensions\n  const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n  // State variable to hide/reveal custom dimensions section\n  const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n  var isRectangular = true;\n\n  // Event handler for shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n\n    // Update dimensions based on the selected shape\n    setDimensions(dimensionOptions(type));\n\n    // Reset selected dimension to the first one\n    setSelectedDimensionsIndex(0);\n    isRectangular = type === 'rectangular' || 'loaf';\n  }\n\n  // Event handler for dimension change\n  function handleDimensionChange(event) {\n    const selectedIndex = event.target.value;\n    setSelectedDimensionsIndex(selectedIndex);\n\n    // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n    setIsCustomDimensions(selectedIndex === 'custom');\n  }\n\n  // Returns an array of acceptable pan conversions, formatted as [pan type, pan dimension string]\n  function findMatches(shape, selectedVolume) {\n    var matches = [];\n    for (const type in pans) {\n      if (type !== shape) {\n        pans[type].forEach(pan => {\n          if (Math.abs(pan.volume - selectedVolume) < maxVolumeDifference) {\n            matches.push([type, getDimensions(type, pan)]);\n          }\n        });\n      }\n    }\n    return matches;\n  }\n\n  // Renders the matches array in list form\n  function renderMatches(shape, selectedVolume) {\n    const matches = findMatches(shape, selectedVolume);\n    if (matches.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No substitutions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 20\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Can be substituted with\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: matches.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item[0], \": \", item[1]]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: selectedDimensionsIndex,\n          onChange: handleDimensionChange,\n          children: [dimensions.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"custom\",\n            children: \"Custom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), isCustomDimensions && isRectangular && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"length\",\n          placeholder: \"Length\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          placeholder: \"Width\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }, this), isCustomDimensions && !isRectangular && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"diameter\",\n          placeholder: \"Diameter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"di6pG4Jx7R5Fo79Mtycdd4RHvoU=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","pans","rectangular","length","width","height","round","diameter","springform","bundt","tube","loaf","maxVolumeDifference","dimensionOptions","type","map","value","label","cubicInchesToLitres","x","cylinderVolume","Math","PI","calculateCuboidVolume","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","dimensions","addVolumes","forEach","volume","getDimensions","pan","PanSizer","_s","shape","setShape","setDimensions","selectedDimensionsIndex","setSelectedDimensionsIndex","isCustomDimensions","setIsCustomDimensions","isRectangular","handleShapeChange","event","target","handleDimensionChange","selectedIndex","findMatches","selectedVolume","matches","abs","push","renderMatches","children","fileName","_jsxFileName","lineNumber","columnNumber","item","index","className","id","name","onChange","option","placeholder","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nconst pans = {\n    rectangular: [\n        { length: 8, width: 8, height: 2 },\n        { length: 9, width: 9, height: 2  },\n        { length: 10, width: 10, height: 2 },\n        { length: 11, width: 7, height: 2 },\n        { length: 13, width: 9, height: 2 }\n    ],\n    round: [\n        { diameter: 6, height: 2 },\n        { diameter: 8, height: 2 },\n        { diameter: 9, height: 2 },\n        { diameter: 10, height: 2 }\n    ],\n    springform: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    bundt: [\n        { diameter: 8, height: 4 },\n        { diameter: 10, height: 3 }\n    ],\n    tube: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    loaf: [\n        { length: 8, width: 4, height: 2.5 },\n        { length: 9, width: 5, height: 2.5 }\n    ],\n};\n\nconst maxVolumeDifference = 0.1;\n\n// Generates dimension options for specific pan type\nfunction dimensionOptions(type) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return pans[type].map(({ length, width, height }) => ({\n            value: { length, width, height },\n            label: `${length} x ${width} x ${height}`\n        }));\n    } else {\n        return pans[type].map(({ diameter, height }) => ({\n            value: { diameter, height },\n            label: `${diameter} x ${height}`\n        }));\n    }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return calculateCuboidVolume(dimensions); \n    } else if (type === 'round' || type === 'springform') {\n        return calculateCylinderVolume(dimensions); \n    } else if (type === 'tube') {\n        return calculateHollowCylinderVolume(dimensions, 1); \n    } else if (type === 'bundt') {\n        return calculateHollowCylinderVolume(dimensions, 0.7); \n    }\n}\n\n// Adds corresponding volume for each dimension set in pans\nfunction addVolumes() {\n    for (const type in pans) {\n        pans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n        });\n    }\n}\naddVolumes();\n\n// Generates dimension options for specific pan type\nfunction getDimensions(type, pan) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return `${pan.length} x ${pan.width} x ${pan.height}`;\n    } else {\n        return `${pan.diameter} x ${pan.height}`;\n    }\n}\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variable for selected shape\n    const [shape, setShape] = useState('rectangular');\n\n    // State variable for dimensions of selected shape\n    const [dimensions, setDimensions] = useState(dimensionOptions('rectangular'));\n    \n    // State variable for index of selected dimensions\n    const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n    // State variable to hide/reveal custom dimensions section\n    const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n\n    var isRectangular = true;\n\n    // Event handler for shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n\n        // Update dimensions based on the selected shape\n        setDimensions(dimensionOptions(type));\n\n        // Reset selected dimension to the first one\n        setSelectedDimensionsIndex(0);\n\n        isRectangular = type === 'rectangular' || 'loaf';\n\n    }\n\n    // Event handler for dimension change\n    function handleDimensionChange(event) {\n        const selectedIndex = event.target.value;\n        setSelectedDimensionsIndex(selectedIndex);\n\n        // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n        setIsCustomDimensions(selectedIndex === 'custom');\n    }\n\n    // Returns an array of acceptable pan conversions, formatted as [pan type, pan dimension string]\n    function findMatches(shape, selectedVolume) {\n        var matches = [];\n        for (const type in pans) {\n            if (type !== shape) {\n                pans[type].forEach(pan => {\n                    if (Math.abs(pan.volume - selectedVolume) < maxVolumeDifference) {\n                        matches.push([type, getDimensions(type, pan)]);\n                    }\n                });\n            }\n        } \n        return matches;  \n    }\n\n    // Renders the matches array in list form\n    function renderMatches(shape, selectedVolume) {\n        const matches = findMatches(shape, selectedVolume);\n        if (matches.length === 0) {\n            return <p>No substitutions found.</p>;\n        }\n        return (\n            <div>\n                <h3>Can be substituted with</h3>\n                <ul>\n                    {matches.map((item, index) => (\n                        <li key={index}>{item[0]}: {item[1]}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n\n    // Render the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={selectedDimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Map over dimension options to display in dropdown */}\n                    {dimensions.map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    <option value=\"custom\">Custom</option>\n                    </select>\n                </p>\n                \n                {/* Displayed only if user chooses to enter custom dimensions */}\n                {isCustomDimensions && isRectangular && (\n                    <p>\n                        <input type=\"number\" name=\"length\" placeholder=\"Length\" /> x&nbsp;\n                        <input type=\"number\" name=\"width\" placeholder=\"Width\" /> x&nbsp;\n                        <input type=\"number\" name=\"height\" placeholder=\"Height\" />\n                    </p>\n                )}\n\n                {isCustomDimensions && !isRectangular && (\n                    <p>\n                        <input type=\"number\" name=\"diameter\" placeholder=\"Diameter\" /> x&nbsp;\n                        <input type=\"number\" name=\"height\" placeholder=\"Height\" />\n                    </p>\n                )}\n                \n                {/* Display matches, if any */}\n                {/* <div id=\"pan-matches\">\n                    {renderMatches(shape, pans[shape][selectedDimensionsIndex].volume)}\n                </div> */}\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}