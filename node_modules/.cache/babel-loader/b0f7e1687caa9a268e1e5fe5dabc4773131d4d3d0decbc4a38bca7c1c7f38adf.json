{"ast":null,"code":"import { defaultPans } from '../utils/panData.js';\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * cubicInchToLiter;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of certain pan types\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nexport function calculateVolume(type, dimensions) {\n  switch (type) {\n    case 'rectangular':\n    case 'loaf':\n      return calculateCuboidVolume(dimensions);\n    case 'round':\n    case 'springform':\n      return calculateCylinderVolume(dimensions);\n    case 'tube':\n      return calculateHollowCylinderVolume(dimensions, 1);\n    case 'bundt':\n      return calculateHollowCylinderVolume(dimensions, bundtScaler);\n  }\n}\n\n// Generates dimension options for specific pan type\nexport function generateLabel(type, dimensions) {\n  if (dimensions.label === 'custom') {\n    return 'Custom';\n  } else if (type === 'rectangular' || type === 'loaf') {\n    const {\n      length,\n      width,\n      height\n    } = dimensions;\n    return `${length} X ${width} X ${height}`;\n  } else {\n    const {\n      diameter,\n      height\n    } = dimensions;\n    return `${diameter} X ${height}`;\n  }\n}\n\n// Updates each dimension with its corresponding volume and label\nexport function updateDimensions() {\n  for (const type in defaultPans) {\n    defaultPans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n      dimensions.label = generateLabel(type, dimensions);\n    });\n  }\n}","map":{"version":3,"names":["defaultPans","cubicInchesToLitres","x","cubicInchToLiter","cylinderVolume","diameter","height","Math","PI","calculateCuboidVolume","length","width","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","type","dimensions","bundtScaler","generateLabel","label","updateDimensions","forEach","volume"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/utils/panHelpers.js"],"sourcesContent":["import { defaultPans } from '../utils/panData.js';\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * cubicInchToLiter;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of certain pan types\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nexport function calculateVolume(type, dimensions) {\n    switch(type) {\n        case 'rectangular':\n        case 'loaf':\n            return calculateCuboidVolume(dimensions); \n        case 'round':\n        case 'springform':\n            return calculateCylinderVolume(dimensions);\n        case 'tube':\n            return calculateHollowCylinderVolume(dimensions, 1); \n        case 'bundt':\n            return calculateHollowCylinderVolume(dimensions, bundtScaler);  \n    }\n}\n\n// Generates dimension options for specific pan type\nexport function generateLabel(type, dimensions) {\n    if (dimensions.label === 'custom') {\n        return 'Custom';\n    } else if (type === 'rectangular' || type === 'loaf') {\n        const { length, width, height } = dimensions;\n        return `${length} X ${width} X ${height}`;\n    } else {\n        const { diameter, height } = dimensions;\n        return `${diameter} X ${height}`;\n    }\n}\n\n// Updates each dimension with its corresponding volume and label\nexport function updateDimensions() {\n    for (const type in defaultPans) {\n        defaultPans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n            dimensions.label = generateLabel(type, dimensions);\n        });\n    }\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,qBAAqB;;AAEjD;AACA,SAASC,mBAAmBA,CAACC,CAAC,EAAE;EAC5B,OAAOA,CAAC,GAAGC,gBAAgB;AAC/B;;AAEA;AACA,SAASC,cAAcA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EACtC,OAAQD,QAAQ,GAAC,CAAC,IAAKA,QAAQ,GAAC,CAAC,CAAC,GAAGC,MAAM,GAAGC,IAAI,CAACC,EAAE;AACzD;;AAEA;AACA,SAASC,qBAAqBA,CAAC;EAAEC,MAAM;EAAEC,KAAK;EAAEL;AAAO,CAAC,EAAE;EACtD,OAAOL,mBAAmB,CAACS,MAAM,GAAGC,KAAK,GAAGL,MAAM,CAAC;AACvD;;AAEA;AACA,SAASM,uBAAuBA,CAAC;EAAEP,QAAQ;EAAEC;AAAO,CAAC,EAAE;EACnD,OAAOL,mBAAmB,CAACG,cAAc,CAACC,QAAQ,EAAEC,MAAM,CAAC,CAAC;AAChE;;AAEA;AACA;AACA,SAASO,6BAA6BA,CAAC;EAAER,QAAQ;EAAEC;AAAO,CAAC,EAAEQ,MAAM,EAAE;EACjE,MAAMC,WAAW,GAAGX,cAAc,CAACC,QAAQ,EAAEC,MAAM,CAAC;EACpD,MAAMU,aAAa,GAAGX,QAAQ,GAAC,EAAE;EACjC,MAAMY,WAAW,GAAGb,cAAc,CAACY,aAAa,EAAEV,MAAM,CAAC;EACzD,OAAOL,mBAAmB,CAACc,WAAW,GAAGD,MAAM,GAAGG,WAAW,CAAC;AAClE;;AAEA;AACA,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAC9C,QAAOD,IAAI;IACP,KAAK,aAAa;IAClB,KAAK,MAAM;MACP,OAAOV,qBAAqB,CAACW,UAAU,CAAC;IAC5C,KAAK,OAAO;IACZ,KAAK,YAAY;MACb,OAAOR,uBAAuB,CAACQ,UAAU,CAAC;IAC9C,KAAK,MAAM;MACP,OAAOP,6BAA6B,CAACO,UAAU,EAAE,CAAC,CAAC;IACvD,KAAK,OAAO;MACR,OAAOP,6BAA6B,CAACO,UAAU,EAAEC,WAAW,CAAC;EACrE;AACJ;;AAEA;AACA,OAAO,SAASC,aAAaA,CAACH,IAAI,EAAEC,UAAU,EAAE;EAC5C,IAAIA,UAAU,CAACG,KAAK,KAAK,QAAQ,EAAE;IAC/B,OAAO,QAAQ;EACnB,CAAC,MAAM,IAAIJ,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,MAAM,EAAE;IAClD,MAAM;MAAET,MAAM;MAAEC,KAAK;MAAEL;IAAO,CAAC,GAAGc,UAAU;IAC5C,OAAQ,GAAEV,MAAO,MAAKC,KAAM,MAAKL,MAAO,EAAC;EAC7C,CAAC,MAAM;IACH,MAAM;MAAED,QAAQ;MAAEC;IAAO,CAAC,GAAGc,UAAU;IACvC,OAAQ,GAAEf,QAAS,MAAKC,MAAO,EAAC;EACpC;AACJ;;AAEA;AACA,OAAO,SAASkB,gBAAgBA,CAAA,EAAG;EAC/B,KAAK,MAAML,IAAI,IAAInB,WAAW,EAAE;IAC5BA,WAAW,CAACmB,IAAI,CAAC,CAACM,OAAO,CAACL,UAAU,IAAI;MACpCA,UAAU,CAACM,MAAM,GAAGR,eAAe,CAACC,IAAI,EAAEC,UAAU,CAAC;MACrDA,UAAU,CAACG,KAAK,GAAGD,aAAa,CAACH,IAAI,EAAEC,UAAU,CAAC;IACtD,CAAC,CAAC;EACN;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}