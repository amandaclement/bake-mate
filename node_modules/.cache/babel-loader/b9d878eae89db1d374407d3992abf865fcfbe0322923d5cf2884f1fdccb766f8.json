{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { defaultPans } from '../utils/panData.js';\n// import { defaultPans } from '../utils/panData.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst maxVolumeDifference = 0.1;\nconst bundtScaler = 0.7;\nconst cubicInchToLiter = 0.0163871;\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * cubicInchToLiter;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of certain pan types\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  switch (type) {\n    case 'rectangular':\n    case 'loaf':\n      return calculateCuboidVolume(dimensions);\n    case 'round':\n    case 'springform':\n      return calculateCylinderVolume(dimensions);\n    case 'tube':\n      return calculateHollowCylinderVolume(dimensions, 1);\n    case 'bundt':\n      return calculateHollowCylinderVolume(dimensions, bundtScaler);\n  }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n  if (dimensions.label === 'custom') {\n    return 'Custom';\n  } else if (type === 'rectangular' || type === 'loaf') {\n    const {\n      length,\n      width,\n      height\n    } = dimensions;\n    return `${length} X ${width} X ${height}`;\n  } else {\n    const {\n      diameter,\n      height\n    } = dimensions;\n    return `${diameter} X ${height}`;\n  }\n}\n\n// Updates each dimension with its corresponding volume and label\nfunction updateDimensions() {\n  for (const type in defaultPans) {\n    defaultPans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n      dimensions.label = generateLabel(type, dimensions);\n    });\n  }\n}\nupdateDimensions();\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variables\n  const [pans, setPans] = useState(defaultPans);\n  const [shape, setShape] = useState('rectangular');\n  const [dimensionsIndex, setDimensionsIndex] = useState(0);\n  const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n  // Handles shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n    setDimensionsIndex(0);\n    setIsDisplayMatches(false);\n  }\n\n  // Handles dimension change\n  function handleDimensionChange(event) {\n    const selectedIndex = event.target.value;\n    setDimensionsIndex(selectedIndex);\n    setIsDisplayMatches(false);\n  }\n\n  // Handles custom dimension input entries\n  function handleCustomDimensionChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n\n    // Clone pans, add new dimension to clone, then assign clone back to pans\n    const updatedPans = {\n      ...pans\n    };\n    updatedPans[shape][dimensionsIndex][name] = value;\n    setPans(updatedPans);\n    setIsDisplayMatches(false);\n  }\n\n  // Handles submit button\n  function handleResult(event) {\n    // Prevent page reload on button click\n    event.preventDefault();\n\n    // Update volume if dealing with custom dimensions\n    if (dimensionsIndex == pans[shape].length - 1) {\n      // Clone pans, add new volume to clone if needed, then assign clone back to pans\n      const updatedPans = {\n        ...pans\n      };\n      updatedPans[shape][dimensionsIndex].volume = calculateVolume(shape, pans[shape][dimensionsIndex]);\n      setPans(updatedPans);\n    }\n    setIsDisplayMatches(true);\n  }\n\n  // Returns an array of acceptable pan substitutes, formatted as type:label\n  function findMatches() {\n    var label = generateLabel(shape, pans[shape][dimensionsIndex]);\n    var volume = pans[shape][dimensionsIndex].volume;\n    var matches = [];\n    for (const type in pans) {\n      pans[type].forEach(pan => {\n        // Check conditions for matching pans\n        const isDifferentLabel = pan.label !== label;\n        const isDifferentShape = shape !== type;\n        const isNotCustom = pan.label !== 'Custom';\n        const isVolumeWithinRange = Math.abs(pan.volume - volume) < maxVolumeDifference;\n        if ((isDifferentLabel || !isDifferentLabel && isDifferentShape) && isNotCustom && isVolumeWithinRange) {\n          matches.push(`${type}: ${pan.label}`);\n        }\n      });\n    }\n    return matches;\n  }\n\n  // Returns the matches in list form\n  function renderMatches() {\n    const matches = findMatches();\n    if (matches.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No substitutions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 20\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Substitutions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: matches.map((match, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: match\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Renders the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: dimensionsIndex,\n          onChange: handleDimensionChange,\n          children: pans[shape].map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), dimensionsIndex == pans[shape].length - 1 && (shape === 'rectangular' || shape === 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"length\",\n          placeholder: \"Length\",\n          required: true,\n          value: pans[shape][dimensionsIndex].length,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          placeholder: \"Width\",\n          required: true,\n          value: pans[shape][dimensionsIndex].width,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: pans[shape][dimensionsIndex].height,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }, this), dimensionsIndex == pans[shape].length - 1 && !(shape === 'rectangular' || shape === 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"diameter\",\n          placeholder: \"Diameter\",\n          required: true,\n          value: pans[shape][dimensionsIndex].diameter,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this), \" X\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: pans[shape][dimensionsIndex].height,\n          onChange: handleCustomDimensionChange,\n          className: \"dimension-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResult,\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), isDisplayMatches && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderMatches()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"U0mHF75i7zc5bHOaObcCY0nfm4E=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","defaultPans","jsxDEV","_jsxDEV","maxVolumeDifference","bundtScaler","cubicInchToLiter","cubicInchesToLitres","x","cylinderVolume","diameter","height","Math","PI","calculateCuboidVolume","length","width","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","type","dimensions","generateLabel","label","updateDimensions","forEach","volume","PanSizer","_s","pans","setPans","shape","setShape","dimensionsIndex","setDimensionsIndex","isDisplayMatches","setIsDisplayMatches","handleShapeChange","event","target","value","handleDimensionChange","selectedIndex","handleCustomDimensionChange","name","updatedPans","handleResult","preventDefault","findMatches","matches","pan","isDifferentLabel","isDifferentShape","isNotCustom","isVolumeWithinRange","abs","push","renderMatches","children","fileName","_jsxFileName","lineNumber","columnNumber","map","match","index","className","id","onChange","option","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { defaultPans } from '../utils/panData.js';\n// import { defaultPans } from '../utils/panData.js';\n\nconst maxVolumeDifference = 0.1;\nconst bundtScaler = 0.7;\nconst cubicInchToLiter = 0.0163871;\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * cubicInchToLiter;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of certain pan types\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    switch(type) {\n        case 'rectangular':\n        case 'loaf':\n            return calculateCuboidVolume(dimensions); \n        case 'round':\n        case 'springform':\n            return calculateCylinderVolume(dimensions);\n        case 'tube':\n            return calculateHollowCylinderVolume(dimensions, 1); \n        case 'bundt':\n            return calculateHollowCylinderVolume(dimensions, bundtScaler);  \n    }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n    if (dimensions.label === 'custom') {\n        return 'Custom';\n    } else if (type === 'rectangular' || type === 'loaf') {\n        const { length, width, height } = dimensions;\n        return `${length} X ${width} X ${height}`;\n    } else {\n        const { diameter, height } = dimensions;\n        return `${diameter} X ${height}`;\n    }\n}\n\n// Updates each dimension with its corresponding volume and label\nfunction updateDimensions() {\n    for (const type in defaultPans) {\n        defaultPans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n            dimensions.label = generateLabel(type, dimensions);\n        });\n    }\n}\nupdateDimensions();\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variables\n    const [pans, setPans] = useState(defaultPans);\n    const [shape, setShape] = useState('rectangular');\n    const [dimensionsIndex, setDimensionsIndex] = useState(0);\n    const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n    // Handles shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n        setDimensionsIndex(0);\n        setIsDisplayMatches(false);\n    }\n\n    // Handles dimension change\n    function handleDimensionChange(event) {\n        const selectedIndex = event.target.value;\n        setDimensionsIndex(selectedIndex);\n        setIsDisplayMatches(false);\n    }\n\n    // Handles custom dimension input entries\n    function handleCustomDimensionChange(event) {\n        const { name, value } = event.target;\n\n        // Clone pans, add new dimension to clone, then assign clone back to pans\n        const updatedPans = { ...pans };\n        updatedPans[shape][dimensionsIndex][name] = value;\n        setPans(updatedPans);\n\n        setIsDisplayMatches(false);\n    }\n\n    // Handles submit button\n    function handleResult(event) {\n        // Prevent page reload on button click\n        event.preventDefault(); \n\n        // Update volume if dealing with custom dimensions\n        if (dimensionsIndex == (pans[shape].length - 1)) {\n            // Clone pans, add new volume to clone if needed, then assign clone back to pans\n            const updatedPans = { ...pans };\n            updatedPans[shape][dimensionsIndex].volume = calculateVolume(shape, pans[shape][dimensionsIndex]);\n            setPans(updatedPans);\n        }\n        setIsDisplayMatches(true);\n    }\n\n    // Returns an array of acceptable pan substitutes, formatted as type:label\n    function findMatches() {\n        var label = generateLabel(shape, pans[shape][dimensionsIndex]);\n        var volume = pans[shape][dimensionsIndex].volume;\n        var matches = [];\n        for (const type in pans) {\n            pans[type].forEach(pan => {\n                // Check conditions for matching pans\n                const isDifferentLabel = pan.label !== label;\n                const isDifferentShape = shape !== type;\n                const isNotCustom = pan.label !== 'Custom';\n                const isVolumeWithinRange = Math.abs(pan.volume - volume) < maxVolumeDifference;\n\n                if ((isDifferentLabel || !isDifferentLabel && isDifferentShape) && isNotCustom && isVolumeWithinRange) {\n                    matches.push(`${type}: ${pan.label}`);\n                }\n            });\n        } \n        return matches;  \n    }\n\n    // Returns the matches in list form\n    function renderMatches() {\n        const matches = findMatches();\n        if (matches.length === 0) {\n            return <p>No substitutions found.</p>;\n        }\n        return (\n            <div>\n                <h3>Substitutions:</h3>\n                <ul>\n                    {matches.map((match, index) => (\n                        <li key={index}>{match}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n\n    // Renders the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={dimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Map over dimension options to display in dropdown */}\n                    {pans[shape].map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    </select>\n                </p>\n                \n                {/* Displays additional input boxes (based on chosen shape) only if user chooses to enter custom dimensions */}\n                {dimensionsIndex == (pans[shape].length - 1) && (shape === 'rectangular' || shape === 'loaf') && (\n                    <p>\n                        <input \n                            type=\"number\" \n                            name=\"length\" \n                            placeholder=\"Length\" \n                            required \n                            value={pans[shape][dimensionsIndex].length} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"width\" \n                            placeholder=\"Width\" \n                            required \n                            value={pans[shape][dimensionsIndex].width} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"height\" \n                            placeholder=\"Height\" \n                            required \n                            value={pans[shape][dimensionsIndex].height} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        />\n                    </p>\n                )}\n                {dimensionsIndex == (pans[shape].length - 1) && !(shape === 'rectangular' || shape === 'loaf') && (\n                    <p>\n                        <input \n                            type=\"number\" \n                            name=\"diameter\" \n                            placeholder=\"Diameter\" \n                            required \n                            value={pans[shape][dimensionsIndex].diameter} \n                            onChange={handleCustomDimensionChange} \n                            className=\"dimension-input\"\n                        /> X&nbsp;\n                        <input \n                            type=\"number\" \n                            name=\"height\" \n                            placeholder=\"Height\" \n                            required \n                            value={pans[shape][dimensionsIndex].height}  \n                            onChange={handleCustomDimensionChange}\n                            className=\"dimension-input\"\n                        />\n                    </p>\n                )}\n\n                <button onClick={handleResult}>Enter</button>\n                \n                {/* Renders a list of pan matches, if any */}\n                {isDisplayMatches && \n                    <div>{renderMatches()}</div>\n                }\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}