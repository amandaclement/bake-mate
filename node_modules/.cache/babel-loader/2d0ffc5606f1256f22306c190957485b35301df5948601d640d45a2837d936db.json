{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pans = {\n  rectangular: [{\n    length: 8,\n    width: 8,\n    height: 2\n  }, {\n    length: 9,\n    width: 9,\n    height: 2\n  }, {\n    length: 10,\n    width: 10,\n    height: 2\n  }, {\n    length: 11,\n    width: 7,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }]\n  // round: [\n  //     { diameter: 6, height: 2 },\n  //     { diameter: 8, height: 2 },\n  //     { diameter: 9, height: 2 },\n  //     { diameter: 10, height: 2 }\n  // ],\n  // springform: [\n  //     { diameter: 8, height: 3 },\n  //     { diameter: 9, height: 3 }\n  // ],\n  // bundt: [\n  //     { diameter: 8, height: 4 },\n  //     { diameter: 10, height: 3 }\n  // ],\n  // tube: [\n  //     { diameter: 8, height: 3 },\n  //     { diameter: 9, height: 3 }\n  // ],\n  // loaf: [\n  //     { length: 8, width: 4, height: 2.5 },\n  //     { length: 9, width: 5, height: 2.5 }\n  // ],\n};\nconst maxVolumeDifference = 0.1;\n\n// Generates dimension options (list) for specific pan type\nfunction dimensionOptions(type) {\n  return pans[type].map(dimensions => {\n    return dimensions.dimensionsLabel;\n  });\n\n  // if (type === 'rectangular' || type === 'loaf') {\n  //     return pans[type].map(({ length, width, height }) => ({\n  //         value: { length, width, height },\n  //         label: `${length} x ${width} x ${height}`\n  //     }));\n  // } else {\n  //     return pans[type].map(({ diameter, height }) => ({\n  //         value: { diameter, height },\n  //         label: `${diameter} x ${height}`\n  //     }));\n  // }\n}\n\n// Generates dimension options for specific pan type\nfunction generateDimensionLabel(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    const {\n      length,\n      width,\n      height\n    } = dimensions;\n    return {\n      value: {\n        length,\n        width,\n        height\n      },\n      label: `${length} x ${width} x ${height}`\n    };\n  } else {\n    const {\n      diameter,\n      height\n    } = dimensions;\n    return {\n      value: {\n        diameter,\n        height\n      },\n      label: `${diameter} x ${height}`\n    };\n  }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return calculateCuboidVolume(dimensions);\n  } else if (type === 'round' || type === 'springform') {\n    return calculateCylinderVolume(dimensions);\n  } else if (type === 'tube') {\n    return calculateHollowCylinderVolume(dimensions, 1);\n  } else if (type === 'bundt') {\n    return calculateHollowCylinderVolume(dimensions, 0.7);\n  }\n}\n\n// Adds corresponding volume and labels for each dimension set in pans\nfunction addVolumes() {\n  for (const type in pans) {\n    pans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n      dimensions.dimensionsLabel = generateDimensionLabel(type, dimensions);\n    });\n  }\n}\naddVolumes();\nconsole.log(pans['rectangular'][1]);\n\n// Generates dimension options for specific pan type\n// function getDimensions(type, pan) {\n//     if (type === 'rectangular' || type === 'loaf') {\n//         return `${pan.length} x ${pan.width} x ${pan.height}`;\n//     } else {\n//         return `${pan.diameter} x ${pan.height}`;\n//     }\n// }\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variable for selected shape\n  const [shape, setShape] = useState('rectangular');\n\n  // State variable for dimensions of selected shape\n  const [shapeDimensions, setShapeDimensions] = useState(dimensionOptions('rectangular'));\n  const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n\n  // State variable for index of selected dimensions\n  const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n  // State variable to manage custom dimensions section\n  const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n  var showMatches = false;\n\n  // const [customDimensions, setCustomDimensions] = useState({\n  //     length: '',\n  //     width: '',\n  //     height: '',\n  //     diameter: ''\n  //   });\n\n  // console.log(\"check \" + currentDimensions.length); // 8\n\n  // State variable to manage when to show matches\n  const [isShowMatches, setIsShowMatches] = useState(false);\n\n  // Event handler for shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n\n    // Update dimensions based on the selected shape\n    setShapeDimensions(dimensionOptions(type));\n\n    // Reset selected dimension to the first one\n    setSelectedDimensionsIndex(0);\n\n    // Hide custom dimensions section\n    setIsCustomDimensions(false);\n    setIsShowMatches(false);\n  }\n\n  // Event handler for dimension change\n  function handleDimensionChange(event) {\n    const selectedIndex = event.target.value;\n    setSelectedDimensionsIndex(selectedIndex);\n\n    // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n    setIsCustomDimensions(selectedIndex === 'custom');\n    if (selectedIndex === 'custom') {\n      setIsCustomDimensions(true);\n      showMatches = false;\n    } else {\n      setIsCustomDimensions(false);\n    }\n  }\n  function handleCustomDimensionChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setCurrentDimensions({\n      ...currentDimensions,\n      [name]: value\n    });\n  }\n  function handleDimensionCalculation(event) {\n    event.preventDefault(); // prevent page reload on button click\n\n    // for (const type in pans) {\n    //     pans[type].forEach(dimensions => {\n    //         dimensions.volume = calculateVolume(type, dimensions);\n    //     });\n    // }\n\n    currentDimensions.volume = calculateVolume(shape, currentDimensions);\n    showMatches = true;\n\n    // calculateVolume(shape, currentDimensions);\n  }\n\n  // Update dimensions object with user-inputted custom value\n  // function handleCustomDimension(event) {\n  //     const {name, value} = event.target;\n  //     setCustomDimensions({\n  //         ...customDimensions,\n  //         [name]: value\n  //       });\n  // }\n\n  // function handleCustomDimensions() {\n  //     customDimensions.volume = calculateVolume(shape, customDimensions);\n  //     setIsShowMatches(true);\n  // }\n\n  // function handleMatchesReveal() {\n  //     calculateVolume(shape, customDimensions);\n  //     setIsShowMatches(true);\n  // }\n\n  // Returns an array of acceptable pan conversions, formatted as [pan type, pan dimension string]\n  // function findMatches(shape, selectedVolume) {\n  //     var matches = [];\n  //     for (const type in pans) {\n  //         if (type !== shape) {\n  //             pans[type].forEach(pan => {\n  //                 if (Math.abs(pan.volume - selectedVolume) < maxVolumeDifference) {\n  //                     matches.push([type, getDimensions(type, pan)]);\n  //                 }\n  //             });\n  //         }\n  //     } \n  //     return matches;  \n  // }\n\n  // Renders the matches array in list form\n  // function renderMatches(shape, selectedVolume) {\n  //     const matches = findMatches(shape, selectedVolume);\n  //     if (matches.length === 0) {\n  //         return <p>No substitutions found.</p>;\n  //     }\n  //     return (\n  //         <div>\n  //             <h3>Can be substituted with</h3>\n  //             <ul>\n  //                 {matches.map((item, index) => (\n  //                     <li key={index}>{item[0]}: {item[1]}</li>\n  //                 ))}\n  //             </ul>\n  //         </div>\n  //     );\n  // }\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: selectedDimensionsIndex,\n          onChange: handleDimensionChange,\n          children: [!isCustomDimensions && shapeDimensions.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"custom\",\n            children: \"Custom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), isCustomDimensions && (shape === 'rectangular' || shape == 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"length\",\n          placeholder: \"Length\",\n          required: true,\n          value: currentDimensions.length,\n          onChange: handleCustomDimensionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          placeholder: \"Width\",\n          required: true,\n          value: currentDimensions.width,\n          onChange: handleCustomDimensionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: currentDimensions.height,\n          onChange: handleCustomDimensionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDimensionCalculation,\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"u5SgKE7lmKCVIfytpUNH7rywd5Y=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","pans","rectangular","length","width","height","maxVolumeDifference","dimensionOptions","type","map","dimensions","dimensionsLabel","generateDimensionLabel","value","label","diameter","cubicInchesToLitres","x","cylinderVolume","Math","PI","calculateCuboidVolume","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","addVolumes","forEach","volume","console","log","PanSizer","_s","shape","setShape","shapeDimensions","setShapeDimensions","currentDimensions","setCurrentDimensions","selectedDimensionsIndex","setSelectedDimensionsIndex","isCustomDimensions","setIsCustomDimensions","showMatches","isShowMatches","setIsShowMatches","handleShapeChange","event","target","handleDimensionChange","selectedIndex","handleCustomDimensionChange","name","handleDimensionCalculation","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","option","index","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nconst pans = {\n    rectangular: [\n        { length: 8, width: 8, height: 2 },\n        { length: 9, width: 9, height: 2  },\n        { length: 10, width: 10, height: 2 },\n        { length: 11, width: 7, height: 2 },\n        { length: 13, width: 9, height: 2 }\n    ],\n    // round: [\n    //     { diameter: 6, height: 2 },\n    //     { diameter: 8, height: 2 },\n    //     { diameter: 9, height: 2 },\n    //     { diameter: 10, height: 2 }\n    // ],\n    // springform: [\n    //     { diameter: 8, height: 3 },\n    //     { diameter: 9, height: 3 }\n    // ],\n    // bundt: [\n    //     { diameter: 8, height: 4 },\n    //     { diameter: 10, height: 3 }\n    // ],\n    // tube: [\n    //     { diameter: 8, height: 3 },\n    //     { diameter: 9, height: 3 }\n    // ],\n    // loaf: [\n    //     { length: 8, width: 4, height: 2.5 },\n    //     { length: 9, width: 5, height: 2.5 }\n    // ],\n};\n\nconst maxVolumeDifference = 0.1;\n\n// Generates dimension options (list) for specific pan type\nfunction dimensionOptions(type) {\n    return pans[type].map(dimensions => {\n        return dimensions.dimensionsLabel;\n    });\n\n    // if (type === 'rectangular' || type === 'loaf') {\n    //     return pans[type].map(({ length, width, height }) => ({\n    //         value: { length, width, height },\n    //         label: `${length} x ${width} x ${height}`\n    //     }));\n    // } else {\n    //     return pans[type].map(({ diameter, height }) => ({\n    //         value: { diameter, height },\n    //         label: `${diameter} x ${height}`\n    //     }));\n    // }\n}\n\n// Generates dimension options for specific pan type\nfunction generateDimensionLabel(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        const { length, width, height } = dimensions;\n        return {\n            value: { length, width, height },\n            label: `${length} x ${width} x ${height}`\n        };\n    } else {\n        const { diameter, height } = dimensions;\n        return {\n            value: { diameter, height },\n            label: `${diameter} x ${height}`\n        };\n    }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return calculateCuboidVolume(dimensions); \n    } else if (type === 'round' || type === 'springform') {\n        return calculateCylinderVolume(dimensions); \n    } else if (type === 'tube') {\n        return calculateHollowCylinderVolume(dimensions, 1); \n    } else if (type === 'bundt') {\n        return calculateHollowCylinderVolume(dimensions, 0.7); \n    }\n}\n\n// Adds corresponding volume and labels for each dimension set in pans\nfunction addVolumes() {\n    for (const type in pans) {\n        pans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n            dimensions.dimensionsLabel = generateDimensionLabel(type, dimensions);\n        });\n    }\n}\naddVolumes();\n\nconsole.log(pans['rectangular'][1]);\n\n// Generates dimension options for specific pan type\n// function getDimensions(type, pan) {\n//     if (type === 'rectangular' || type === 'loaf') {\n//         return `${pan.length} x ${pan.width} x ${pan.height}`;\n//     } else {\n//         return `${pan.diameter} x ${pan.height}`;\n//     }\n// }\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variable for selected shape\n    const [shape, setShape] = useState('rectangular');\n\n    // State variable for dimensions of selected shape\n    const [shapeDimensions, setShapeDimensions] = useState(dimensionOptions('rectangular'));\n\n    const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n    \n    // State variable for index of selected dimensions\n    const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n    // State variable to manage custom dimensions section\n    const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n\n    var showMatches = false;\n\n    // const [customDimensions, setCustomDimensions] = useState({\n    //     length: '',\n    //     width: '',\n    //     height: '',\n    //     diameter: ''\n    //   });\n\n    // console.log(\"check \" + currentDimensions.length); // 8\n\n    // State variable to manage when to show matches\n    const [isShowMatches, setIsShowMatches] = useState(false);\n\n    // Event handler for shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n\n        // Update dimensions based on the selected shape\n        setShapeDimensions(dimensionOptions(type));\n\n        // Reset selected dimension to the first one\n        setSelectedDimensionsIndex(0);\n\n        // Hide custom dimensions section\n        setIsCustomDimensions(false);\n        setIsShowMatches(false);\n    }\n\n    // Event handler for dimension change\n    function handleDimensionChange(event) {\n        const selectedIndex = event.target.value;\n        setSelectedDimensionsIndex(selectedIndex);\n\n        // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n        setIsCustomDimensions(selectedIndex === 'custom');\n\n        if (selectedIndex === 'custom') {\n            setIsCustomDimensions(true);\n            showMatches = false;\n        } else {\n            setIsCustomDimensions(false);\n        }\n    }\n\n    function handleCustomDimensionChange(event) {\n        const {name, value} = event.target;\n        setCurrentDimensions({\n            ...currentDimensions,\n            [name]: value\n          });\n    }\n\n    function handleDimensionCalculation(event) {\n        event.preventDefault(); // prevent page reload on button click\n\n        // for (const type in pans) {\n        //     pans[type].forEach(dimensions => {\n        //         dimensions.volume = calculateVolume(type, dimensions);\n        //     });\n        // }\n\n        currentDimensions.volume = calculateVolume(shape, currentDimensions);\n        showMatches = true;\n\n        // calculateVolume(shape, currentDimensions);\n    }\n\n    // Update dimensions object with user-inputted custom value\n    // function handleCustomDimension(event) {\n    //     const {name, value} = event.target;\n    //     setCustomDimensions({\n    //         ...customDimensions,\n    //         [name]: value\n    //       });\n    // }\n\n    // function handleCustomDimensions() {\n    //     customDimensions.volume = calculateVolume(shape, customDimensions);\n    //     setIsShowMatches(true);\n    // }\n\n    // function handleMatchesReveal() {\n    //     calculateVolume(shape, customDimensions);\n    //     setIsShowMatches(true);\n    // }\n\n    // Returns an array of acceptable pan conversions, formatted as [pan type, pan dimension string]\n    // function findMatches(shape, selectedVolume) {\n    //     var matches = [];\n    //     for (const type in pans) {\n    //         if (type !== shape) {\n    //             pans[type].forEach(pan => {\n    //                 if (Math.abs(pan.volume - selectedVolume) < maxVolumeDifference) {\n    //                     matches.push([type, getDimensions(type, pan)]);\n    //                 }\n    //             });\n    //         }\n    //     } \n    //     return matches;  \n    // }\n\n    // Renders the matches array in list form\n    // function renderMatches(shape, selectedVolume) {\n    //     const matches = findMatches(shape, selectedVolume);\n    //     if (matches.length === 0) {\n    //         return <p>No substitutions found.</p>;\n    //     }\n    //     return (\n    //         <div>\n    //             <h3>Can be substituted with</h3>\n    //             <ul>\n    //                 {matches.map((item, index) => (\n    //                     <li key={index}>{item[0]}: {item[1]}</li>\n    //                 ))}\n    //             </ul>\n    //         </div>\n    //     );\n    // }\n\n    // Render the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={selectedDimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Unless custom diemnsion ption chosen, map over dimension options to display in dropdown */}\n                    {!isCustomDimensions && shapeDimensions.map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    <option value=\"custom\">Custom</option>\n                    </select>\n                </p>\n                \n                {/* Displayed only if user chooses to enter custom dimensions */}\n                {isCustomDimensions && (shape === 'rectangular' || shape == 'loaf') && (\n                    <p>\n                        <input type=\"number\" name=\"length\" placeholder=\"Length\" required value={currentDimensions.length} onChange={handleCustomDimensionChange} /> x&nbsp;\n                        <input type=\"number\" name=\"width\" placeholder=\"Width\" required value={currentDimensions.width} onChange={handleCustomDimensionChange} /> x&nbsp;\n                        <input type=\"number\" name=\"height\" placeholder=\"Height\" required value={currentDimensions.height} onChange={handleCustomDimensionChange} />\n                        <button onClick={handleDimensionCalculation}>Enter</button>\n                    </p>\n                )}\n{/* \n                {showMatches && \n                    <div>\n                        {renderMatches(shape, currentDimensions.volume)}\n                    </div>\n                } */}\n\n                {/* {isCustomDimensions && !(shape === 'rectangular' || shape === 'loaf') && (\n                    <p>\n                        <input type=\"number\" name=\"diameter\" value={dimensions.diameter} placeholder=\"Diameter\" /> x&nbsp;\n                        <input type=\"number\" name=\"height\" value={dimensions.height} placeholder=\"Height\" />\n                    </p>\n                )} */}\n                \n                {/* Display matches, if any */}\n                {/* {isShowMatches && (              \n                    <div id=\"pan-matches\">\n                        {renderMatches(shape, pans[shape][selectedDimensionsIndex].volume)}\n                    </div>\n                )} */}\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}