{"ast":null,"code":"var _jsxFileName = \"/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pans = {\n  rectangular: [{\n    length: 8,\n    width: 8,\n    height: 2\n  }, {\n    length: 9,\n    width: 9,\n    height: 2\n  }, {\n    length: 10,\n    width: 10,\n    height: 2\n  }, {\n    length: 11,\n    width: 7,\n    height: 2\n  }, {\n    length: 13,\n    width: 9,\n    height: 2\n  }],\n  round: [{\n    diameter: 6,\n    height: 2\n  }, {\n    diameter: 8,\n    height: 2\n  }, {\n    diameter: 9,\n    height: 2\n  }, {\n    diameter: 10,\n    height: 2\n  }],\n  springform: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  bundt: [{\n    diameter: 8,\n    height: 4\n  }, {\n    diameter: 10,\n    height: 3\n  }],\n  tube: [{\n    diameter: 8,\n    height: 3\n  }, {\n    diameter: 9,\n    height: 3\n  }],\n  loaf: [{\n    length: 8,\n    width: 4,\n    height: 2.5\n  }, {\n    length: 9,\n    width: 5,\n    height: 2.5\n  }]\n};\nconst maxVolumeDifference = 0.1;\n\n// Generates dimension options (list) for specific pan type\nfunction generateDimensionsList(type) {\n  return pans[type].map(dimensions => {\n    return dimensions.label;\n  });\n\n  // if (type === 'rectangular' || type === 'loaf') {\n  //     return pans[type].map(({ length, width, height }) => ({\n  //         value: { length, width, height },\n  //         label: `${length} x ${width} x ${height}`\n  //     }));\n  // } else {\n  //     return pans[type].map(({ diameter, height }) => ({\n  //         value: { diameter, height },\n  //         label: `${diameter} x ${height}`\n  //     }));\n  // }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    const {\n      length,\n      width,\n      height\n    } = dimensions;\n    return `${length} x ${width} x ${height}`;\n  } else {\n    const {\n      diameter,\n      height\n    } = dimensions;\n    return `${diameter} x ${height}`;\n  }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n  return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n  return diameter / 2 * (diameter / 2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({\n  length,\n  width,\n  height\n}) {\n  return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({\n  diameter,\n  height\n}) {\n  return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({\n  diameter,\n  height\n}, scaler) {\n  const outerVolume = cylinderVolume(diameter, height);\n  const innerDiameter = diameter / 10;\n  const innerVolume = cylinderVolume(innerDiameter, height);\n  return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return calculateCuboidVolume(dimensions);\n  } else if (type === 'round' || type === 'springform') {\n    return calculateCylinderVolume(dimensions);\n  } else if (type === 'tube') {\n    return calculateHollowCylinderVolume(dimensions, 1);\n  } else if (type === 'bundt') {\n    return calculateHollowCylinderVolume(dimensions, 0.7);\n  }\n}\n\n// Adds corresponding volume and labels for each dimension set in pans\nfunction addVolumes() {\n  for (const type in pans) {\n    pans[type].forEach(dimensions => {\n      dimensions.volume = calculateVolume(type, dimensions);\n      dimensions.label = generateLabel(type, dimensions);\n    });\n  }\n}\naddVolumes();\n\n// Generates dimension options for specific pan type === REMOOOVE\nfunction getDimensions(type, pan) {\n  if (type === 'rectangular' || type === 'loaf') {\n    return `${pan.length} x ${pan.width} x ${pan.height}`;\n  } else {\n    return `${pan.diameter} x ${pan.height}`;\n  }\n}\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n  _s();\n  // State variable for selected shape\n  const [shape, setShape] = useState('rectangular');\n\n  // State variable for dimensions of selected shape\n  // const [shapeDimensions, setShapeDimensions] = useState(generateDimensionsList('rectangular'));\n\n  const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n\n  // State variable for index of selected dimensions\n  const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n  // State variable to manage custom dimensions section\n  const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n\n  // State variable to manage when to show matches\n  const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n  // Event handler for shape change\n  function handleShapeChange(event) {\n    const type = event.target.value;\n    setShape(type);\n    setIsDisplayMatches(false);\n\n    // Update dimensions based on the selected shape\n    // setShapeDimensions(generateDimensionsList(type));\n\n    // Reset selected dimension to the first one\n    setSelectedDimensionsIndex(0);\n    setCurrentDimensions(pans[type][0]);\n\n    // Hide custom dimensions section\n    setIsCustomDimensions(false);\n  }\n\n  // Event handler for dimension change\n  function handleDimensionChange(event) {\n    const selectedIndex = event.target.value;\n    setSelectedDimensionsIndex(selectedIndex);\n    setIsDisplayMatches(false);\n\n    // setCurrentDimensions(pans[shape][selectedIndex]);\n\n    // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n    // setIsCustomDimensions(selectedIndex === 'custom');\n\n    if (selectedIndex === 'custom') {\n      setIsCustomDimensions(true);\n      setIsDisplayMatches(false);\n    } else {\n      setIsCustomDimensions(false);\n      setCurrentDimensions(pans[shape][selectedIndex]);\n    }\n  }\n  function handleCustomDimensionChange(event) {\n    // setCurrentDimensions(pans['rectangular'][0]);\n\n    const {\n      name,\n      value\n    } = event.target;\n    setCurrentDimensions({\n      ...currentDimensions,\n      [name]: value\n    });\n  }\n  function handleDimensionCalculation(event) {\n    // Prevent page reload on button click\n    event.preventDefault();\n\n    // var volume = calculateVolume(shape, currentDimensions);\n    // console.log(\"volume is \" + volume);\n\n    // for (const type in pans) {\n    //     pans[type].forEach(dimensions => {\n    //         dimensions.volume = calculateVolume(type, dimensions);\n    //     });\n    // }\n\n    // currentDimensions.volume = calculateVolume(shape, currentDimensions);\n    // showMatches = true;\n\n    // calculateVolume(shape, currentDimensions);\n  }\n  function handleEnter(event) {\n    // Prevent page reload on button click\n    event.preventDefault();\n    var volume = calculateVolume(shape, currentDimensions);\n    setIsDisplayMatches(true);\n    console.log(\"volume is \" + volume);\n  }\n\n  // Update dimensions object with user-inputted custom value\n  // function handleCustomDimension(event) {\n  //     const {name, value} = event.target;\n  //     setCustomDimensions({\n  //         ...customDimensions,\n  //         [name]: value\n  //       });\n  // }\n\n  // function handleCustomDimensions() {\n  //     customDimensions.volume = calculateVolume(shape, customDimensions);\n  //     setIsShowMatches(true);\n  // }\n\n  // function handleMatchesReveal() {\n  //     calculateVolume(shape, customDimensions);\n  //     setIsShowMatches(true);\n  // }\n\n  // Returns an array of acceptable pan conversions, formatted as [pan type, pan dimension string]\n  function findMatches(shape, selectedVolume) {\n    var matches = [];\n    // for (const type in pans) {\n    //     if (type !== shape) {\n    //         pans[type].forEach(pan => {\n    //             if (Math.abs(pan.volume - selectedVolume) < maxVolumeDifference) {\n    //                 matches.push([type, getDimensions(type, pan)]);\n    //             }\n    //         });\n    //     }\n    // } \n    return matches;\n  }\n\n  // Renders the matches array in list form\n  function renderMatches(shape, selectedVolume) {\n    const matches = findMatches(shape, selectedVolume);\n    // if (matches.length === 0) {\n    //     return <p>No substitutions found.</p>;\n    // }\n    // return (\n    //     <div>\n    //         <h3>Can be substituted with</h3>\n    //         <ul>\n    //             {matches.map((item, index) => (\n    //                 <li key={index}>{item[0]}: {item[1]}</li>\n    //             ))}\n    //         </ul>\n    //     </div>\n    // );\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Pan Sizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"basic-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Shape: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape\",\n          name: \"shape\",\n          value: shape,\n          onChange: handleShapeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rectangular\",\n            children: \"Rectangular\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"springform\",\n            children: \"Springform\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bundt\",\n            children: \"Bundt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tube\",\n            children: \"Tube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"loaf\",\n            children: \"Loaf\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Dimensions: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"shape-dimensions\",\n          name: \"shape-dimensions\",\n          value: selectedDimensionsIndex,\n          onChange: handleDimensionChange,\n          children: [!isCustomDimensions && pans[shape].map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"custom\",\n            children: \"Custom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), isCustomDimensions && (shape === 'rectangular' || shape == 'loaf') && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"length\",\n          placeholder: \"Length\",\n          required: true,\n          value: currentDimensions.length,\n          onChange: handleCustomDimensionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          placeholder: \"Width\",\n          required: true,\n          value: currentDimensions.width,\n          onChange: handleCustomDimensionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 25\n        }, this), \" x\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          placeholder: \"Height\",\n          required: true,\n          value: currentDimensions.height,\n          onChange: handleCustomDimensionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEnter,\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 9\n  }, this);\n}\n_s(PanSizer, \"YLl1/x1vYV3JU7dWU49mjYwyHlI=\");\n_c = PanSizer;\nvar _c;\n$RefreshReg$(_c, \"PanSizer\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","pans","rectangular","length","width","height","round","diameter","springform","bundt","tube","loaf","maxVolumeDifference","generateDimensionsList","type","map","dimensions","label","generateLabel","cubicInchesToLitres","x","cylinderVolume","Math","PI","calculateCuboidVolume","calculateCylinderVolume","calculateHollowCylinderVolume","scaler","outerVolume","innerDiameter","innerVolume","calculateVolume","addVolumes","forEach","volume","getDimensions","pan","PanSizer","_s","shape","setShape","currentDimensions","setCurrentDimensions","selectedDimensionsIndex","setSelectedDimensionsIndex","isCustomDimensions","setIsCustomDimensions","isDisplayMatches","setIsDisplayMatches","handleShapeChange","event","target","value","handleDimensionChange","selectedIndex","handleCustomDimensionChange","name","handleDimensionCalculation","preventDefault","handleEnter","console","log","findMatches","selectedVolume","matches","renderMatches","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id","onChange","option","index","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/Users/AmandaClement/Desktop/React/bake-mate/src/components/PanSizer.jsx"],"sourcesContent":["import { useState } from 'react';\n\n// Standard pan shapes and their dimensions\nconst pans = {\n    rectangular: [\n        { length: 8, width: 8, height: 2 },\n        { length: 9, width: 9, height: 2  },\n        { length: 10, width: 10, height: 2 },\n        { length: 11, width: 7, height: 2 },\n        { length: 13, width: 9, height: 2 }\n    ],\n    round: [\n        { diameter: 6, height: 2 },\n        { diameter: 8, height: 2 },\n        { diameter: 9, height: 2 },\n        { diameter: 10, height: 2 }\n    ],\n    springform: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    bundt: [\n        { diameter: 8, height: 4 },\n        { diameter: 10, height: 3 }\n    ],\n    tube: [\n        { diameter: 8, height: 3 },\n        { diameter: 9, height: 3 }\n    ],\n    loaf: [\n        { length: 8, width: 4, height: 2.5 },\n        { length: 9, width: 5, height: 2.5 }\n    ],\n};\n\nconst maxVolumeDifference = 0.1;\n\n// Generates dimension options (list) for specific pan type\nfunction generateDimensionsList(type) {\n    return pans[type].map(dimensions => {\n        return dimensions.label;\n    });\n\n    // if (type === 'rectangular' || type === 'loaf') {\n    //     return pans[type].map(({ length, width, height }) => ({\n    //         value: { length, width, height },\n    //         label: `${length} x ${width} x ${height}`\n    //     }));\n    // } else {\n    //     return pans[type].map(({ diameter, height }) => ({\n    //         value: { diameter, height },\n    //         label: `${diameter} x ${height}`\n    //     }));\n    // }\n}\n\n// Generates dimension options for specific pan type\nfunction generateLabel(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        const { length, width, height } = dimensions;\n        return `${length} x ${width} x ${height}`;\n    } else {\n        const { diameter, height } = dimensions;\n        return `${diameter} x ${height}`;\n    }\n}\n\n// Converts cubic inches to litres\nfunction cubicInchesToLitres(x) {\n    return x * 0.0163871;\n}\n\n// Calculates volume of a cylinder without unit conversion\nfunction cylinderVolume(diameter, height) {\n    return (diameter/2) * (diameter/2) * height * Math.PI;\n}\n\n// Calculates volume of a cuboid with unit conversion\nfunction calculateCuboidVolume({ length, width, height }) {\n    return cubicInchesToLitres(length * width * height);\n}\n\n// Calculates volume of a cylinder with unit conversion\nfunction calculateCylinderVolume({ diameter, height }) {\n    return cubicInchesToLitres(cylinderVolume(diameter, height));\n}\n\n// Calculates volume of a cylinder with a hole in the middle with unit conversion\n// Scaler is used in a very rudimentary way to account for loss of volume due to angled base of bundt cakes\nfunction calculateHollowCylinderVolume({ diameter, height }, scaler) {\n    const outerVolume = cylinderVolume(diameter, height);\n    const innerDiameter = diameter/10;\n    const innerVolume = cylinderVolume(innerDiameter, height);\n    return cubicInchesToLitres(outerVolume * scaler - innerVolume);\n}\n\n// Calculates volume of pan based on type and dimensions\nfunction calculateVolume(type, dimensions) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return calculateCuboidVolume(dimensions); \n    } else if (type === 'round' || type === 'springform') {\n        return calculateCylinderVolume(dimensions); \n    } else if (type === 'tube') {\n        return calculateHollowCylinderVolume(dimensions, 1); \n    } else if (type === 'bundt') {\n        return calculateHollowCylinderVolume(dimensions, 0.7); \n    }\n}\n\n// Adds corresponding volume and labels for each dimension set in pans\nfunction addVolumes() {\n    for (const type in pans) {\n        pans[type].forEach(dimensions => {\n            dimensions.volume = calculateVolume(type, dimensions);\n            dimensions.label = generateLabel(type, dimensions);\n        });\n    }\n}\naddVolumes();\n\n// Generates dimension options for specific pan type === REMOOOVE\nfunction getDimensions(type, pan) {\n    if (type === 'rectangular' || type === 'loaf') {\n        return `${pan.length} x ${pan.width} x ${pan.height}`;\n    } else {\n        return `${pan.diameter} x ${pan.height}`;\n    }\n}\n\n// React component for Pan Sizer\nexport default function PanSizer() {\n\n    // State variable for selected shape\n    const [shape, setShape] = useState('rectangular');\n\n    // State variable for dimensions of selected shape\n    // const [shapeDimensions, setShapeDimensions] = useState(generateDimensionsList('rectangular'));\n\n    const [currentDimensions, setCurrentDimensions] = useState(pans['rectangular'][0]);\n    \n    // State variable for index of selected dimensions\n    const [selectedDimensionsIndex, setSelectedDimensionsIndex] = useState(0);\n\n    // State variable to manage custom dimensions section\n    const [isCustomDimensions, setIsCustomDimensions] = useState(false);\n\n    // State variable to manage when to show matches\n    const [isDisplayMatches, setIsDisplayMatches] = useState(false);\n\n    // Event handler for shape change\n    function handleShapeChange(event) {\n        const type = event.target.value;\n        setShape(type);\n\n        setIsDisplayMatches(false);\n\n        // Update dimensions based on the selected shape\n        // setShapeDimensions(generateDimensionsList(type));\n\n        // Reset selected dimension to the first one\n        setSelectedDimensionsIndex(0);\n        \n        setCurrentDimensions(pans[type][0]);\n\n        // Hide custom dimensions section\n        setIsCustomDimensions(false);\n    }\n\n    // Event handler for dimension change\n    function handleDimensionChange(event) {\n        const selectedIndex = event.target.value;\n        setSelectedDimensionsIndex(selectedIndex);\n\n        setIsDisplayMatches(false);\n\n        // setCurrentDimensions(pans[shape][selectedIndex]);\n\n        // If selected dimension is custom, set bool to true to allow user to enter their own dimensions\n        // setIsCustomDimensions(selectedIndex === 'custom');\n\n        if (selectedIndex === 'custom') {\n            setIsCustomDimensions(true);\n            setIsDisplayMatches(false);\n        } else {\n            setIsCustomDimensions(false);\n            setCurrentDimensions(pans[shape][selectedIndex]);\n        }\n    }\n\n    function handleCustomDimensionChange(event) {\n        // setCurrentDimensions(pans['rectangular'][0]);\n\n        const {name, value} = event.target;\n        setCurrentDimensions({\n            ...currentDimensions,\n            [name]: value\n          });\n    }\n\n    function handleDimensionCalculation(event) {\n        // Prevent page reload on button click\n        event.preventDefault(); \n\n        // var volume = calculateVolume(shape, currentDimensions);\n        // console.log(\"volume is \" + volume);\n\n        // for (const type in pans) {\n        //     pans[type].forEach(dimensions => {\n        //         dimensions.volume = calculateVolume(type, dimensions);\n        //     });\n        // }\n\n        // currentDimensions.volume = calculateVolume(shape, currentDimensions);\n        // showMatches = true;\n\n        // calculateVolume(shape, currentDimensions);\n    }\n\n    function handleEnter(event) {\n        // Prevent page reload on button click\n        event.preventDefault(); \n        var volume = calculateVolume(shape, currentDimensions);\n\n        setIsDisplayMatches(true);\n\n        console.log(\"volume is \" + volume);\n    }\n\n    // Update dimensions object with user-inputted custom value\n    // function handleCustomDimension(event) {\n    //     const {name, value} = event.target;\n    //     setCustomDimensions({\n    //         ...customDimensions,\n    //         [name]: value\n    //       });\n    // }\n\n    // function handleCustomDimensions() {\n    //     customDimensions.volume = calculateVolume(shape, customDimensions);\n    //     setIsShowMatches(true);\n    // }\n\n    // function handleMatchesReveal() {\n    //     calculateVolume(shape, customDimensions);\n    //     setIsShowMatches(true);\n    // }\n\n    // Returns an array of acceptable pan conversions, formatted as [pan type, pan dimension string]\n    function findMatches(shape, selectedVolume) {\n        var matches = [];\n        // for (const type in pans) {\n        //     if (type !== shape) {\n        //         pans[type].forEach(pan => {\n        //             if (Math.abs(pan.volume - selectedVolume) < maxVolumeDifference) {\n        //                 matches.push([type, getDimensions(type, pan)]);\n        //             }\n        //         });\n        //     }\n        // } \n        return matches;  \n    }\n\n    // Renders the matches array in list form\n    function renderMatches(shape, selectedVolume) {\n        const matches = findMatches(shape, selectedVolume);\n        // if (matches.length === 0) {\n        //     return <p>No substitutions found.</p>;\n        // }\n        // return (\n        //     <div>\n        //         <h3>Can be substituted with</h3>\n        //         <ul>\n        //             {matches.map((item, index) => (\n        //                 <li key={index}>{item[0]}: {item[1]}</li>\n        //             ))}\n        //         </ul>\n        //     </div>\n        // );\n        return <div>hey</div>;\n    }\n\n    // Render the component\n    return (\n        <section className=\"tool\">\n            <h2 className=\"form-title\">Pan Sizer</h2>\n            <form className=\"basic-form\">\n                <p>\n                    <label>Shape: </label>\n                    <select \n                        id=\"shape\" \n                        name=\"shape\" \n                        value={shape} \n                        onChange={handleShapeChange}\n                    >\n                        <option value=\"rectangular\">Rectangular</option>\n                        <option value=\"round\">Round</option>\n                        <option value=\"springform\">Springform</option>\n                        <option value=\"bundt\">Bundt</option>\n                        <option value=\"tube\">Tube</option>\n                        <option value=\"loaf\">Loaf</option>\n                    </select>\n                </p>\n\n                <p>\n                    <label>Dimensions: </label>\n                    <select\n                        id=\"shape-dimensions\"\n                        name=\"shape-dimensions\"\n                        value={selectedDimensionsIndex}\n                        onChange={handleDimensionChange}\n                    >  \n\n                    {/* Unless custom diemnsion ption chosen, map over dimension options to display in dropdown */}\n                    {!isCustomDimensions && pans[shape].map((option, index) => (\n                        <option key={index} value={index}>\n                            {option.label}\n                        </option>\n                    ))}\n                    <option value=\"custom\">Custom</option>\n                    </select>\n                </p>\n                \n                {/* Displayed only if user chooses to enter custom dimensions */}\n                {isCustomDimensions && (shape === 'rectangular' || shape == 'loaf') && (\n                    <p>\n                        <input type=\"number\" name=\"length\" placeholder=\"Length\" required value={currentDimensions.length} onChange={handleCustomDimensionChange} /> x&nbsp;\n                        <input type=\"number\" name=\"width\" placeholder=\"Width\" required value={currentDimensions.width} onChange={handleCustomDimensionChange} /> x&nbsp;\n                        <input type=\"number\" name=\"height\" placeholder=\"Height\" required value={currentDimensions.height} onChange={handleCustomDimensionChange} />\n                    </p>\n                )}\n\n                <button onClick={handleEnter}>Enter</button>\n{/* \n                {showMatches && \n                    <div>\n                        {renderMatches(shape, currentDimensions.volume)}\n                    </div>\n                } */}\n\n                {/* {isCustomDimensions && !(shape === 'rectangular' || shape === 'loaf') && (\n                    <p>\n                        <input type=\"number\" name=\"diameter\" value={dimensions.diameter} placeholder=\"Diameter\" /> x&nbsp;\n                        <input type=\"number\" name=\"height\" value={dimensions.height} placeholder=\"Height\" />\n                    </p>\n                )} */}\n                \n                {/* Display matches, if any */}\n                {/* {isDisplayMatches && !isCustomDimensions && (              \n                    <div id=\"pan-matches\">\n                        {renderMatches(shape, pans[shape][selectedDimensionsIndex].volume)}\n                    </div>\n                )} */}\n            </form>\n        </section>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}